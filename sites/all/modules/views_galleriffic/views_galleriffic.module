<?php
// $Id: views_galleriffic.module,v 1.3.2.14 2010/07/08 17:21:54 acouch Exp $

/**
 * Implementation of hook_views_api().
 */
function views_galleriffic_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of template preprocess for the view
 */
function template_preprocess_views_galleriffic_view(&$vars) {

  $view   = $vars['view'];
  $option = $view->style_plugin->options;
  $row    = $view->row_plugin->options;
  $vars['option']= $option;

  drupal_add_js(
    array(
      'views_galleriffic' => array(
          'delay'    => (int)$option['delay'],
          'numbthumbs'    => (int)$option['numbthumbs'],
          'enableTopPager'     => $option['pager_top'],
          'enableBottomPager'      => $option['pager_bottom'],
          'renderSSControls'   => $option['renderss'],
          'renderNavControls' => $option['rendernav'],
          'playLinkText'     => check_plain($option['playtext']),
          'pauseLinkText'     => check_plain($option['pausetext']),
          'prevLinkText'     => check_plain($option['prevlink']),
          'nextLinkText'     => check_plain($option['nextlink']),
          'nextPageLinkText'     => check_plain($option['nextpage']),
          'prevPageLinkText'     => check_plain($option['prevpage']),

          //disabled for now'enableHistory'     => $option['history'],
          'autoStart'     => $option['start'],
      ),
    ),
    'setting'
  );
}

/**
 * Implementation of template preprocess for the view fields
 */
function template_preprocess_views_galleriffic_view_gallerifficrows(&$vars) {

  $exit = 0;
  $view = $vars['view'];
  $options = $vars['options'];
  $vars['fields'] = array(); // ensure it's at least an empty array.
  foreach ($view->field as $id => $field) {
    $field_output = $view->field[$id]->theme($vars['row']);
    $object = new stdClass();
    $object->content = $field_output;
    $object->download_original = $view->style_options['download'];
    // find the option (ie title, description, slide, thumbnail)  for the field
    foreach ($options as $field_title => $field_label) {
      if ($field_label == $id) {
        $object->option = $field_title;
      }
    }
    $vars['fields'][$object->option] = $object;
    //cleaning up fields for output. imho views should take care of this but am checking anyway
    $vars['fields']['title_field']->content = check_markup($vars['fields']['title_field']->content, $format = FILTER_FORMAT_DEFAULT, $check = FALSE);
    $vars['fields']['description_field']->content = check_markup($vars['fields']['description_field']->content, $format = FILTER_FORMAT_DEFAULT, $check = FALSE);
    if ($vars['fields']['slide_field']->content) {
      $vars['fields']['slide_field']->content = url($vars['fields']['slide_field']->content);
    }
    $vars['fields']['thumbnail_field']->content = url($vars['fields']['thumbnail_field']->content);
    //remove any tags and then remove any special characters for inclusion in img and href
    $vars['fields']['title_field']->stripped = htmlspecialchars(strip_tags($vars['fields']['title_field']->content));
  }
}

