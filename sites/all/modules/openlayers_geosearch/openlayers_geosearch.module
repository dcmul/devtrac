<?php

/**
 *  Implementation of our own geosearch_hook_info
 */

function openlayers_geosearch_hook_info() {
  return array(
    'geosearch' => array(
      'geosearch' => array(
        'geosearch' => array(
          'runs when' => t('When we ask to geosearch a location'),
        ),
      )
    )
  );
}

/**
 * Implementation of our own hook_geosearch().
 */
function openlayers_geosearch_geosearch($query) {
  $result = array();
  foreach (module_implements('geosearch') as $module) {
    $function = $module .'_geosearch';
    if ($module != 'openlayers_geosearch') {
      $result = $result + call_user_func($function, $query);
    }
  }
  if (!empty($result)) {
    return $result;
  }
  else {
    return FALSE;
  }
}

/**
 * Add required js and css files.
 */
function openlayers_geosearch_load() {
  static $loaded = FALSE;

  if (!$loaded) {
    if (module_exists('jquery_ui')) {
      jquery_ui_add(array('ui.tabs'));
    }
    else {
      drupal_add_js('sites/all/libraries/jquery.ui/ui/ui.tabs.js');
    }

    $path = drupal_get_path('module', 'openlayers_geosearch');
    drupal_add_css($path . '/css/openlayers_geosearch.css');

    $loaded = TRUE;
  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function openlayers_geosearch_ctools_plugin_api($module, $api) {
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_presets':
        return array('version' => 1);
      case 'openlayers_layers':
        return array('version' => 1);
    }
  }
}

/**
 * Implementation of hook_openlayers_presets().
 */
function openlayers_geosearch_openlayers_presets() {
  module_load_include('inc', 'openlayers_geosearch', 'includes/openlayers_geosearch_presets');
  return _openlayers_geosearch_openlayers_presets();
}

/**
 * Implementation of hook_openlayers_layers().
 */
function openlayers_geosearch_openlayers_layers() {
  module_load_include('inc', 'openlayers_geosearch', 'includes/openlayers_geosearch_layers');
  return _openlayers_geosearch_openlayers_layers();
}

/**
 * Implementation of hook_menu().
 */
function openlayers_geosearch_menu() {
  $items = array();
  $items['admin/build/openlayers/geosearch'] = array(
    'title' => 'Geosearch',
    'description' => 'Manage Geosearch Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_geosearch_settings_page'),
    'access arguments' => array('administer openlayers'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  $items['admin/build/openlayers/geosearch/form'] = array(
    'title' => 'Geosearch',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );

  $items['openlayers/geosearch/response_js'] = array(
    'page callback' => 'openlayers_geosearch_get_response_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['openlayers/geosearch/searchpage'] = array(
    'page callback' => 'openlayers_geosearch_searchpage',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Settings page of our own module
 */
function openlayers_geosearch_settings_page() {
  $form['openlayers_geosearch_preset'] = array(
    '#type' => 'select',
    '#title' => t('Map preset'),
    '#description' => t('This is map that will be used to render the view.'),
    '#options' => openlayers_preset_options(),
    '#default_value' => variable_get('openlayers_geosearch_preset', 'default'),
  );
  $form['openlayers_geosearch_test'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Test Page'),
    '#description' => t('Enables the !link.', array('!link' => l('test page', 'openlayers/geosearch/searchpage'))),
    '#default_value' => variable_get('openlayers_geosearch_test', 1),
  );

  // Make a system setting form and return
  return system_settings_form($form);
}

/**
 * Implementation of hook_theme().
 */
function openlayers_geosearch_theme($existing, $type, $theme, $path) {
  return array(
    'openlayers_geosearch_result_html' => array(
      'arguments' => array(
         'provider' => NULL,
         'locations' => NULL,
      ),
      'template' => 'openlayers-geosearch-result-html',
      'path' => drupal_get_path('module', 'openlayers_geosearch') .'/theme',
    ),
  );
}

/**
 * Get response from all hooks and render as HTML
 * This function is called from our AHA form
 */
function openlayers_geosearch_get_response_js($query = '') {
  $query = check_plain($_POST['openlayers_geosearch_query_block']);
  $locations = array();
  if ($response = openlayers_geosearch_geosearch($query)) {
    // Yes, one day we will use a nice .tpl file for this
    $result .= '<div id="openlayersgeosearchtabs">';
    $result .= '<ul>';
    foreach ($response as $provider => $results) {
      $result .= '<li><a href="#openlayersgeosearchtabs-'. $provider .'">'. $provider. ' (' . count($results) .')</a></li>';
    }
    $result .= '</ul>';
    foreach ($response as $provider => $results) {
      $result .= '<div id="openlayersgeosearchtabs-'. $provider .'">';
      foreach ($results as $key => $value) {
        $locations[] = array(
          'locations' => $value,
        );
      }
      if (!empty($locations)) {
        $result .= theme('openlayers_geosearch_result_html', $provider, $locations);
        unset($locations);
      }
      else {
        $result .= "<div>" . $provider . t("returned no results.") . "</div>";
      }
      $result .= '</div>';
    }
  }
  else {
    $result = t('No location found.') . implode(" ," , $_POST);
  }
  drupal_json(array('status' => TRUE, 'data' => $result));
}

/**
 * Implementation of hook_block().
 */
function openlayers_geosearch_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Geosearch Search Box');
      $blocks[1]['info'] = t('Geosearch Search Results');
      $blocks[2]['info'] = t('Geosearch Search Map');
      return $blocks;
      break;
    case 'configure':
      switch ($delta) {
        case 0:
          $options = module_invoke('geocode', 'handler_info');

          //TODO: replace with a setting for selecting search providers
          $form['openlayers_geosearch_provider'] = array(
            '#type' => 'checkboxes',
            '#title' => t('Search Providers'),
            '#description' => t('Select the search providers to use.'),
            '#options' => array_keys($options),
            '#default_value' => variable_get('openlayers_geocode_provider', array('geocode_google')),
          );
          return $form;
        case 1:
          return NULL;
          break;
        case 2:
          $form['openlayers_geosearch_preset'] = array(
            '#type' => 'select',
            '#title' => t('Map preset'),
            '#description' => t('This is map that will be used to render the view.'),
            '#options' => openlayers_preset_options(),
            '#default_value' => variable_get('openlayers_geosearch_preset', 'default'),
          );
          return $form;
      }
      break;
    case 'save':
      switch ($delta) {
        case 0:
          variable_set('openlayers_geosearch_searchbox', array_filter($edit['openlayers_geosearch_provider']));
          break;
        case 1:
          break;
        case 2:
          variable_set('openlayers_geosearch_preset', $edit['openlayers_geosearch_preset']);
          break;
      }
      break;
    case 'view':
      switch ($delta) {
        case 0:
          $block['content'] = drupal_get_form('openlayers_geosearch_searchform');
          break;
        case 1:
          $block['content'] = '<div id="openlayersgeosearchresults">Here will the results be</>';
          break;
        case 2:
          $map = openlayers_preset_load(variable_get('openlayers_geosearch_preset', 'default'));
          $map->data['id'] = 'openlayers_geosearch_map_id';
          $rendered = openlayers_render_map($map->data, variable_get('openlayers_geosearch_preset', 'default'));
          $block['content'] = $rendered;
      }
      return $block;
      break;
  }
}

function openlayers_geosearch_searchform() {
  // Load required js and css.
  openlayers_geosearch_load();

  drupal_add_js(drupal_get_path('module', 'openlayers_geosearch') .'/js/openlayers_geosearch.js');

  $form['openlayers_geosearch_query_block'] = array(
    '#title' => t('Search address'),
    '#type' => 'textfield',
  );
  $form['openlayers_geosearch_button'] = array(
    '#type' => 'button',
    '#value' => t('Search'),
    '#name' => 'search',
    '#ahah' => array(
      'event' => 'click',
      'path' => 'openlayers/geosearch/response_js',
      'wrapper' => 'openlayersgeosearchresults',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Searching...'),
      ),
    ),
  );
  return $form;
}

function openlayers_geosearch_searchpage() {
  if (variable_get('openlayers_geosearch_test', TRUE)) {
    // Load required js and css.
    openlayers_geosearch_load();

    $mapblock = module_invoke('openlayers_geosearch', 'block', 'view', 2);
    $searchblock = module_invoke('openlayers_geosearch', 'block', 'view', 0);
    $resultblock = module_invoke('openlayers_geosearch', 'block', 'view', 1);
    $output = $mapblock['content'] . $searchblock['content'] . $resultblock['content'];
    return $output;
  }
  else {
    drupal_access_denied();
  }
}
