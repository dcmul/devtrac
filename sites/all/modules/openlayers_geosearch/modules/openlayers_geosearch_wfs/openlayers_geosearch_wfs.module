<?php
/**
 * @file
 * This module allows for simple querying of WFS layers
 *
 */

/**
 * Implementation of hook_menu().
 */
function openlayers_geosearch_wfs_menu() {
  $items = array();
  $items['admin/build/openlayers/geosearch/wfs'] = array(
    'title' => 'WFS',
    'description' => 'Manage Geosearch WFS Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_geosearch_wfs_admin_settings'),
    'access arguments' => array('administer openlayers'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  return $items;
}

/**
 * Return the settings form
 */
function openlayers_geosearch_wfs_admin_settings() {
  $form['openlayers_geosearch_wfs_url'] = array(
    '#type' => 'textfield',
    '#title' => t('OpenLayers WFS url'),
    '#description' => t('eg. http://maps.u-map.it/wfs'),
    '#required' => TRUE,
    '#default_value' => variable_get('openlayers_geosearch_wfs_url', ''),
  );

  $form['openlayers_geosearch_wfs_namespace'] = array(
    '#type' => 'textfield',
    '#title' => t('OpenLayers WFS Namespace'),
    '#description' => t('eg. Devtrac,when the full namespace is xmlns:Devtrac="http://www.devtrac.ug/uganda"'),
    '#required' => TRUE,
  '#default_value' => variable_get('openlayers_geosearch_wfs_namespace', ''),
  );

  $form['openlayers_geosearch_wfs_layer'] = array(
    '#type' => 'textfield',
    '#title' => t('OpenLayers WFS Layer'),
    '#description' => t('eg. Devtrac:District'),
    '#required' => TRUE,
    '#default_value' => variable_get('openlayers_geosearch_wfs_layer', ''),
  );

  $form['openlayers_geosearch_wfs_queryfield'] = array(
    '#type' => 'textfield',
    '#title' => t('OpenLayers WFS Field'),
    '#description' => t('eg. name. This field will be queried with a wildcard before and after, case insensitive. like: *field*'),
    '#required' => TRUE,
    '#default_value' => variable_get('openlayers_geosearch_wfs_queryfield', ''),
  );

  $form['openlayers_geosearch_wfs_resultfields'] = array(
    '#type' => 'textfield',
    '#title' => t('Result Fields.'),
    '#description' => t('Fields to show in the result set, as comma seperated valued, eg "Devtrac:id,gml:name,Devtrac:District". The geo field will be detected automatically.'),
    '#required' => TRUE,
    '#default_value' => variable_get('openlayers_geosearch_wfs_resultfields', ''),
  );

  $form['openlayers_geosearch_wfs_geofield'] = array(
    '#type' => 'textfield',
    '#title' => t('Geo Fields.'),
    '#description' => t('The field in the search result that holds the Geometry. eg. "Devtrac:the_geom".'),
    '#required' => TRUE,
    '#default_value' => variable_get('openlayers_geosearch_wfs_geofield', ''),
  );
  // Make a system setting form and return
  return system_settings_form($form);
}

/**
 * Implementation of our own hook_geosearch().
 *
 * Queries the WFS service for our query and formats the result
 *
 * @param $query
 *   Text string with query
 *
 * @return
 *   Array with results
 *
 */
function openlayers_geosearch_wfs_geosearch($query) {
  $request = '<wfs:GetFeature service="WFS" version="1.1.0"
  xmlns:topp="http://www.openplans.org/topp"
  xmlns:wfs="http://www.opengis.net/wfs"
  xmlns:ogc="http://www.opengis.net/ogc"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.opengis.net/wfs
                      http://schemas.opengis.net/wfs/1.1.0/wfs.xsd">
  <wfs:Query typeName="' . variable_get('openlayers_geosearch_wfs_namespace', '') .  ":" . variable_get('openlayers_geosearch_wfs_layer', '') . '">
    <ogc:Filter>
      <PropertyIsLike matchCase="false" wildCard="*" singleChar="#" escapeChar="!">
        <PropertyName>' . variable_get('openlayers_geosearch_wfs_queryfield', '') . '</PropertyName>
        <Literal>*' . $query . '*</Literal>
      </PropertyIsLike>
    </ogc:Filter>
  </wfs:Query>
</wfs:GetFeature>';

  $result = drupal_http_request(
    url(variable_get('openlayers_geosearch_wfs_url', ''),
    array(absolute => TRUE)),
    array('Content-Type' => 'text/xml'),
    'POST', $request
  );
  return _openlayers_geosearch_wfs_process_result($result->data);
}

/**
 * Process the WFS XML result into the internal geosearch format
 *
 * @param
 *   WFS XML value
 *
 * @return
 *  Array with results
 *
 */
function _openlayers_geosearch_wfs_process_result($rawxml) {
  module_load_include('inc', 'wms', 'includes/gml_to_wkt');
  $xmlresult = simplexml_load_string($rawxml);
  $xml = explode("\n", $rawxml);

  if (!$xmlresult) {
    $errors = libxml_get_errors();
    foreach ($errors as $error) {
      echo _openlayers_geosearch_wfs_display_xml_error($error, $xml);
    }
    libxml_clear_errors();
  }

  $namespaces = $xmlresult->getNameSpaces(true);
  $gml = $xmlresult->children($namespaces['gml']);
  $features = $gml->featureMembers;

  $result = array();
  $layername = variable_get('openlayers_geosearch_wfs_layer', '');
  $namespace = variable_get('openlayers_geosearch_wfs_namespace', '');
  $result = $result + _openlayers_geosearch_wfs_namespace_process_result($features, $namespaces, $namespace);
  return array('WFS' => $result);
}

/**
 * Internal function to read all values from fields in 1 specific namespace
 *
 * @param $features
 *   array of fields to go through
 *
 * @param $namespaces
 *   array of all possible namespaces
 *
 * @param $namespace
 *   namespace to extract fields of
 *
 * @return
 *   array of fields and values that are part of the resultfields setting
 *
 */
function _openlayers_geosearch_wfs_namespace_process_result($features, $namespaces, $namespace) {
  $result = array();
  $tpresultfields = variable_get('openlayers_geosearch_wfs_resultfields', '');
  $resultfields = explode(",", $tpresultfields);
  foreach ($features->children($namespaces[$namespace]) as $feature) {
    $address = '';
    $components = Array();
    $location = Array();
    $bounds = Array();

    $queryfieldname = variable_get('openlayers_geosearch_wfs_queryfield', '');
    $queryfields = $feature->children($namespaces['gml']);
    /*
     * From all the fields in this namespace, find the one that has the right name
     */
    foreach ($queryfields as $key => $value) {
      if ($key == $queryfieldname) {
        /* find the GML information */
        $components[$queryfieldname] = $value;
      }
    }

    foreach ($resultfields as $resultfield) {
      $resultfielddetails = explode(":", $resultfield);
      $resultfieldname = $resultfielddetails[1];
      if ($resultfieldname != $queryfieldname) {
        $components[$resultfieldname] = $feature->$resultfieldname;
      }
    }

    $geofielddetails = explode(":", variable_get('openlayers_geosearch_wfs_geofield', ''));
    $geofieldnamespace = $geofielddetails[0];
    $geofieldname = $geofielddetails[1];
    $geofields = $feature->children($namespaces[$geofieldnamespace]);
    /*
     * From all the fields in this namespace, find the one that has the right name
     */
    foreach ($geofields as $key => $value) {
      if ($key == $geofieldname) {
        /* find the GML information */
        $geofield = $value->children($namespaces['gml']);
        // Presume it is a Point TODO: never presume anything
        $latlon = explode(" ", $geofield->Point->pos);
        $location['lat'] = $latlon[0];
        $location['lng'] = $latlon[1];
      }
    }

    $result[] = Array(
      'address' => $address,
      'components' => $components,
      'location' => $location,
      'bounds' => $bounds,
    );
  }
  return $result;
}

/**
 * internal helper function to format an XML error
 * will probably cause havoc in the results when really invoked
 *
 * @param $error
 *   error
 *
 * @param $xml
 *   xml causing the error
 *
 * @return
 *   text describing the error
 */
function _openlayers_geosearch_wfs_display_xml_error($error, $xml) {
  $return  = $xml[$error->line - 1] . "\n";
  $return .= str_repeat('-', $error->column) . "^\n";

  switch ($error->level) {
    case LIBXML_ERR_WARNING:
      $return .= "Warning $error->code: ";
      break;
    case LIBXML_ERR_ERROR:
      $return .= "Error $error->code: ";
      break;
    case LIBXML_ERR_FATAL:
      $return .= "Fatal Error $error->code: ";
      break;
  }

  $return .= trim($error->message) . "\n  Line: $error->line" . "\n  Column: $error->column";
  if ($error->file) {
    $return .= "\n  File: $error->file";
  }

  return "$return\n\n--------------------------------------------\n\n";
}
