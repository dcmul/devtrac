<?php

/**
 * Implementation of hook_ctools_plugin_api().
 */
//function devtrack_module_ctools_plugin_api($module, $api) {
//}

/*
  if (_devtrack_module_isinternetexplorer()) {
    $output .= l('<div class="form-submit">Click to submit</div>', "user/". $applicant->uid ."/submit/confirm", Array('html'=> TRUE));
  }
  else {
    $output .= l('<button class="form-submit" type="button">Click to submit</button>', "user/". $applicant->uid ."/submit/confirm", Array('html'=> TRUE));
  }

 */

function devtrack_module_node_info() {
  return array(
    'bbsync' => array(
      'name' => t('Blackberry Synchronization'),
      'module' => 'devtrack_module',
      'description' => t('Node type to store Big all-in-one json collections from the Blackberry'),
      'has_title' => TRUE,
      'title_label' => 'Title',
      'has_body' => TRUE,
      'body_label' => 'json',
    ),
  );
}

function devtrack_module_perm() {
  return array('sync own bbsync', 'sync all bbsync', 'create bbsync content');
}

function devtrack_module_access($op, $node, $account) {
  $is_author = $account-> uid == $node->uid;
  switch ($op) {
    case 'create':
      return user_access('create bbsync content', $account);
  }
}

function devtrack_module_form(&$node, $form_state) {
  $type = node_get_types('type', $node);
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#rows' => 20,
    '#required' => TRUE,
    '#default_value' => $node->body,
  );
  if ($node->error) {
    $form['error'] = array(
      '#value' => t("There was an error during the sync."),
    );
  }
  if ($node->synced) {
    $form['synced'] = array(
      '#value' => t("This node has been synced"),
    );
    $form['result'] = array(
      '#title' => t("Result"),
      '#value' => t('@result', array('@result' => $node->result)),
    );
  }
  if (is_numeric($node->ftnid)) {
    $tripnode = node_load($node->ftnid);
    $form['ftnid'] = array(
      '#title' => t("Field Trip"),
      '#value' => l($tripnode->title, 'node/'. $node->ftnid),
    );
  };
  return $form;
}

function devtrack_module_insert($node) {
  db_query("INSERT INTO {devtrac_bbsync} (nid, vid, result, synced, error, ftnid) VALUES (%d, %d, '', 0, 0, %d)", $node->nid, $node->vid, $node->ftnid);
}

function devtrack_module_update($node) {
  if ($node->revision) {
    devtrac_module_insert($node);
  }
  else {
    db_query("UPDATE {devtrac_bbsync} SET result = '%s', synced = %d, error = %d  WHERE vid = %d", $node->result, $node->synced, $node->error, $node->vid);
  }
}

function devtrack_module_delete(&$node) {
  db_query("DELETE FROM {devtrac_bbsync} WHERE nid = %d", $node->nid);
}

function devtrack_module_load($node) {
  return db_fetch_object(db_query('SELECT synced, error, result , ftnid from {devtrac_bbsync} WHERE vid = %d', $node->vid));
}

function devtrack_module_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    $node = node_prepare($node, $teaser);
    if (is_numeric($node->ftnid)) {
      $tripnode = node_load($node->ftnid);
      $form['ftnid'] = array(
        '#title' => t("Field Trip"),
        '#value' => l($tripnode->title, 'node/'. $node->ftnid),
      );
    };

    $button = "";
    if (!$node->synced) {
/*      if (_devtrack_module_isinternetexplorer()) {
        $button = l('<div class="form-submit">Sync</div>', "devtrac/bbsync/". $node->nid, Array('html'=> TRUE));
      }
      else {
        $button .= l('<button class="form-submit" type="button">Sync</button>', "devtrac/bbsync/". $node->nid, Array('html'=> TRUE));
      }
      */
      $button = _devtrack_module_getbutton('Sync', "devtrac/bbsync/". $node->nid);
      $node->content['syncbutton'] = array(
        '#value' => $button,
        '#weight' => 5,
      );
    }
    $node->content['result'] = array(
      '#title' => t('Result'),
      '#value' => $node->result,
      '#weight' => 6,
    );
    $node->content['synced'] = array(
      '#title' => t('Synced'),
      '#value' => $node->synced,
      '#weight' => 7,
    );
    $node->content['error'] = array(
      '#title' => t('Error'),
      '#value' => $node->error,
      '#weight' => 8,
    );
    return $node;
  }
}

function devtrack_module_bbsync($node) {
  $placenid = 0;
  $ftritemnid = 0;
  $jsoncollection = $node->body;
  $jsons = json_decode($jsoncollection, TRUE);
  foreach ($jsons as $jsonitem) {
    $jsonarray = (array)$jsonitem;
    $methodname = trim($jsonarray['method'], '"');
//    drupal_set_message("method" . $methodname);
    $result_small = devtrack_module_executejson($jsonarray, $placenid, $ftritemnid);
    if ($methodname == 'node.save') {
      if ($jsonarray['node']['type'] == 'place') {
        $placenid = $result_small;
      }
      elseif ($jsonarray['node']['type'] == 'ftritem') {
        $ftritemnid = $result_small;
      }

      if (is_numeric($result_small)) {
        $node = node_load($result_small);
        if ($jsonarray['node']['changed']) {
          $result .= "Updated ". l($node->title, 'node/'. $node->nid);
        }
        else {
          $result .= "Created ". l($node->title, 'node/'. $node->nid);
        }
      }
      else {
        $result .= "Error ". $result_small;
        drupal_set_message(t('Error: @result_small' . array('@result_small' => $result_small)), 'error');
        break;
      }
    }
    else {
      $qnode = node_load($jsonarray['qnid']);
      $cnode = node_load($jsonarray['contextnid']);
      if (is_numeric($result_small)) {
        $result .= "Submitted Submission " . $result_small . " for Site Visit " . l($qnode->title, 'node/'. $qnode->nid) . " And Location " . l($cnode->title, 'node/'. $cnode->nid);
      }
      else {
        $result .= "Error submitting questions:  " . $result_small . " for Site Visit " . l($qnode->title, 'node/'. $qnode->nid) . " And Location " . l($cnode->title, 'node/'. $cnode->nid);
      }
    }

    $result .= "<br/><br/>";
  }

  $node->result = $result;
  $node->synced = 1;
  node_save($node);

  return $result;
}

function devtrack_module_executejson($jsonarray, $placenid, $ftritemnid) {
  $methodname = trim($jsonarray['method'], '"');
  if ($methodname == "node.save") {
    // This is temporary code that allows us to resave the data over and over again
    if ($jsonarray['node']['changed']) {
      $jsonarray['node']['changed'] = (string) time();
    }
    else {
      $jsonarray['node']['created'] = (string) time();
    }

    if (($jsonarray['node']['type'] == 'ftritem') && (is_numeric($placenid))) {
      if (strpos($jsonarray['node']['field_ftritem_place'][0]['nid']['nid'], 'PLACEID')) {
        $jsonarray['node']['field_ftritem_place'][0]['nid']['nid'] = "[nid:" . $placenid . "]";
      }
    }

    if (($jsonarray['node']['type'] == 'actionitem') && is_numeric($ftritemnid)) {
      if (strpos($jsonarray['node']['field_actionitem_ftreportitem'][0]['nid']['nid'], 'REPORTITEMID')) {
        $jsonarray['node']['field_actionitem_ftreportitem'][0]['nid']['nid'] = "[nid:" . $ftritemnid . "]";
      }
    }

    if (($jsonarray['node']['type'] == 'actionitem') && is_numeric($ftritemnid)) {
      if (strpos($jsonarray['node']['field_actionitem_resp_place'][0]['nid']['nid'], 'PLACEID')) {
        $jsonarray['node']['field_actionitem_resp_place'][0]['nid']['nid'] = "[nid:" . $placenid . "]";
      }
    }

    /* old code
     * This was using services api but it failed horribly on the nodererrer fields
     * //    print_r(kpr( $jsonarray['node'], TRUE));
     *
     * this is where stuff gets seriously ugly
     * here we do things because we know not because we like them
     * This is copied from the services module and from
     * node_service.inc
     * Load the required includes for drupal_execute
     */
//     module_load_include('inc', 'node_service', 'node_service');
    module_load_include('inc', 'node', 'node.pages');

    /*
     *  Change working directory to drupal root to call drupal function,
     *  then change it back to server module root to handle return.
     */
//      $server_root = getcwd();
//      $server_info = services_get_server_info();

//      if ($server_info) {
//        chdir($server_info->drupal_path);
//      }
//        $result .=  node_service_save($jsonarray['node']);
//        if ($server_info) {
//          chdir($server_root);
//        }

    /*
     * This code is all to prepare our node to be saved using node.save
     * This works, but A. Requires a lot of code B. is not flexible at all
     */

    /*
     * Find the images and attach them to the node properly
     */
    if (is_array($jsonarray['node']['field_ftritem_images'])) {
      $c = 0;
      foreach ($jsonarray['node']['field_ftritem_images'] as $file) {
        $fid = $file['fid'];
        $lresult = db_fetch_object(db_query("SELECT * FROM {files} WHERE fid = %d", $fid));
        $file['fid'] = $fid;
        $file['title'] = basename($lresult->filename);
        $file['filename'] = $lresult->filename;
        $file['filepath'] = $lresult->filepath;
        $file['filesize'] = $lresult->filesize;
        $file['mimetype'] = $lresult->filemime;
        $file['status'] = 1;
        if (isset($jsonarray['node']['field_ftritem_images'][$c]['data']['description'])) {
          $file['data'] = array(
            'description' => $jsonarray['node']['field_ftritem_images'][$c]['data']['description'],
          );
        }
        $file['list'] = 1;
        $jsonarray['node']['field_ftritem_images'][$c] = $file;
        $c++;
      }
    }

    /*
     * Rewrite the stuff we used for the nodereferrer module to node_save format
     * Yes, for each field that we use
     */
    if (drupal_substr($jsonarray['node']['field_actionitem_ftreportitem'][0]['nid']['nid'], 0 , 5) == '[nid:') {
      $jsonarray['node']['field_actionitem_ftreportitem'][0]['nid'] = drupal_substr($jsonarray['node']['field_actionitem_ftreportitem'][0]['nid']['nid'], 5 , drupal_strlen($jsonarray['node']['field_actionitem_ftreportitem'][0]['nid']['nid']) -2);
    }
    if (drupal_substr($jsonarray['node']['field_ftritem_place'][0]['nid']['nid'], 0 , 5) == '[nid:') {
      $jsonarray['node']['field_ftritem_place'][0]['nid'] = drupal_substr($jsonarray['node']['field_ftritem_place'][0]['nid']['nid'], 5 , drupal_strlen($jsonarray['node']['field_ftritem_place'][0]['nid']['nid']) -2);
    }
    if (drupal_substr($jsonarray['node']['field_ftritem_field_trip'][0]['nid']['nid'], 0 , 5) == '[nid:') {
      $jsonarray['node']['field_ftritem_field_trip'][0]['nid'] = drupal_substr($jsonarray['node']['field_ftritem_field_trip'][0]['nid']['nid'], 5 , drupal_strlen($jsonarray['node']['field_ftritem_field_trip'][0]['nid']['nid']) -2);
    }
    if (drupal_substr($jsonarray['node']['field_actionitem_resp_place'][0]['nid']['nid'], 0 , 5) == '[nid:') {
      $jsonarray['node']['field_actionitem_resp_place'][0]['nid'] = drupal_substr($jsonarray['node']['field_actionitem_resp_place'][0]['nid']['nid'], 5 , drupal_strlen($jsonarray['node']['field_actionitem_resp_place'][0]['nid']['nid']) -2);
    }
    if (isset($jsonarray['node']['field_actionitem_due_date'])) {
      $jsonarray['node']['field_actionitem_due_date'][0]['value'] =  date("c", strtotime($jsonarray['node']['field_actionitem_due_date'][0]['value']['date']));
    }
    if (isset($jsonarray['node']['field_actionitem_responsible'])) {
      $uid = drupal_substr($jsonarray['node']['field_actionitem_responsible'][0]['uid']['uid'], 5 , drupal_strlen($jsonarray['node']['field_actionitem_responsible'][0]['uid']['uid']) -2);
      $uid = $jsonarray['node']['field_actionitem_responsible'][0]['uid']['uid'];
      watchdog("devtrac", "uid #1 = " . $uid);

      if (is_numeric($uid)) {
        $jsonarray['node']['field_actionitem_responsible'][0]['uid'] = $uid;
      }
      else {
        $uid = db_result(db_query("SELECT uid FROM {users} WHERE name = '%s'", $uid));
        watchdog("devtrac", "uid #2 = " . $uid);

        if ($uid > 0) {
          $jsonarray['node']['field_actionitem_responsible'][0]['uid'] = $uid;
        }
      }
    }

    /*
     * New nodes have no nid and need to be cast to an array
     *
     * Old object need to be loaded and then overridden
     */

    if ($jsonarray['node']['nid'] == 0) {
      unset($jsonarray['node']['nid']);
      $nodeobject = _devtrack_module_array_to_object($jsonarray['node']);
    }
    else {
      $nodeobject = node_load($jsonarray['node']['nid']);
      foreach ($jsonarray['node'] as $key => $value) {
        $nodeobject->$key = $value;
      }
    }
    /*
     * Press the button!
     */
    node_save($nodeobject);
    $result = $nodeobject->nid;
  }
  elseif ($methodname == "questionnaire.submit") {
    /*
     * This function is called directly in the module
     */
    if ($jsonarray['qnid'] == "%REPORTITEMID%") {
      $jsonarray['qnid'] = $ftritemnid;
    }
    if ($jsonarray['contextnid'] == "%PLACEID%") {
      $jsonarray['contextnid'] = $placenid;
    }
    /*
     * Result is the submission id. The submission id does not have a page of its own yet.
     */
    $result = questionaire_question_submitquestions($jsonarray['questions'], $jsonarray['qnid'], $jsonarray['contextnid']);
  }

  // reset the errors in the form we just posted. (though we now use node_save, still just to be sure
  // we stored that value in the $result where is_numeric = good & is_string = not so good
  form_set_error(NULL, '', TRUE);
  node_load(0, NULL, TRUE);
  return $result;
}

/*
 * This is an obsolete function, There are 2 attempts in this one
 * first I tried to call the services module, as if i were a client.
 * That didnt really work
 * Then I tried to use the same trick as the services.browse functionality
 * provides. I learned that you also have to pass all the security variables.
 * But somehow i did not get these parameters working (especially the nodereferrer fields were a problem
 * On top of that the server runs Hardy, which has php 5.1 while our local machines (and Lucid) have
 * php 5.3. The main difference between the 2 is the functionality of json_decode. It has changed.
 * So, this is just code for history, or a next time, when i am not suffering from Intestines issues
 * (i was! yeast, amoebe, the lot)
 */

function devtrack_module_firejson($jsonarray) {
/*
 * This bit of code tried to call the services module through the API
 * That ran into session issues.
 * So now we use the calls that the services_admin_browser also does
 * One big drawback: we completely bypass security!
 *
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_URL, 'http://devtrac.rei/services/json');

  $api_key = trim($jsonarray['api_key'], '"'); // Your API key.
  $domain = trim($jsonarray['domain_name'], '"');
  $method = trim($jsonarray['method'], '"');

  $sessid = session_id();
  $timestamp = (string) time();
  $nonce = base_convert(rand(10e16, 10e20), 10, 36);
  $hash = hash_hmac('sha256', $timestamp .';'.$domain .';'. $nonce .';'. $method, $api_key);

  $jsonarray['domain_time_stamp'] = $timestamp ;
  $jsonarray['nonce'] = $nonce ;
  $jsonarray['hash'] = $hash ;
  $jsonarray['sessid'] =  $sessid ;

  curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonarray);
  //make the request
  $result = curl_exec($ch);

  drupal_set_message("methodname: ". $methodname);
  drupal_set_message("domain: ". $domain);
  drupal_set_message("nonce: ". $nonce);
  drupal_set_message("hash: ". $hash);
  drupal_set_message("api_key: ". $api_key);
  */
  /* Strip the things we dont need */
  $methodname = trim($jsonarray['method'], '"');
  $method = services_method_get($methodname);
  unset($jsonarray['method']);
  unset($jsonarray['domain_name']);
  unset($jsonarray['domain_time_stamp']);
  unset($jsonarray['api_key']);
  unset($jsonarray['nonce']);
  unset($jsonarray['sessid']);
  unset($jsonarray['hash']);

  $result = kpr($jsonarray, TRUE);

// Remove the keys from the array they have to be numbered
  $args = array();
  foreach ($jsonarray as $arg) {
//    if (is_array($arg)) {
//      $keys = array_keys($arg);
//      $args[] = $arg[$keys[0]];
//    }
//    else {
      if (is_object($arg)) {
        $args[] = (array)$arg;
//        drupal_set_message("object" . json_encode($arg));
      }
      else {
        $args[] = $arg;
      }

//    }
  }

//  $result = kpr($args, TRUE);
/*  $result .= kpr($method, TRUE);

  $result .= "arg = " . $method['args'][0];
  $result .= "value = " . $args[0];
  */
  // This bit is copied more or less from services_admin_browse_test_unserialize_args
  $return = array();
  $noskip = FALSE;
  for ($c = count($method['args']) - 1; $c >= 0; $c--) {
    $arg = $method['args'][$c];
    $value = $args[$c];

    // Remove empty values from end of array
    // Once we find a value, we can no longer skip
    if (!is_numeric($value) && empty($value) && !$noskip) {
      continue;
    }
    $noskip = TRUE;

    if (empty($value)) {
      $return[$c] = NULL;
    }
    else {
//      $result .= kpr($value, TRUE);
      if (phpversion() === '5.2.4-2ubuntu5.14') {
        // this is for hardy only
        // and it sucks
        // like big time
        $loopvalue = (array) $value;
        $returnvalue = array();
        foreach ($loopvalue as $key => $mvalue) {
          if (is_array($mvalue)) {
            $mkeys = array_keys($mvalue);
            $mkey = $mkeys[0];
            $mvalue[$mkey] = (array)$mvalue[$mkey];
//            print $mkey . " is array\n\n";
            if (is_object($mvalue[$mkey]['nid'])) {
              $mvalue[$mkey]['nid'] = (array)$mvalue[$mkey]['nid'];
            }
          }
          $returnvalue[$key] = $mvalue;
        }
        $return[$c] = $returnvalue;
      }
      else { // on maverick 5.3.3-1ubuntu9.3 (but we use karmic LTS on the servers
        $return[$c] = json_decode($value, $arg['type'] === 'array');
      }
    }
    break;
  }
  // $result = kpr($return, TRUE);
  // $result .= kpr($return, TRUE);

  if ($return) ksort($return);
  $args = $return;

  // The next line is the way this was supposed to work
  // this call requires all the security services arguments
  // the second option bypasses all that
  //  $result .= services_method_call($method, $args, FALSE);

  /*
   * this is where stuff gets seriously ugly
   * here we do things because we know not because we like them
   * This is copied from the services module and from
   * node_service.inc
   */
  module_load_include('inc', 'node_service', 'node_service');
  module_load_include('inc', 'node', 'node.pages');

  // Change working directory to drupal root to call drupal function,
  // then change it back to server module root to handle return.
  $server_root = getcwd();
  $server_info = services_get_server_info();
  if ($server_info) {
    chdir($server_info->drupal_path);
  }
  // Load the required includes for drupal_execute
  if ($methodname == "node.save") {

    // TODO replace %PLACEID%

    // TODO replace %REPORTITEMID%

    $result .=  node_service_save($jsonarray['node']);
  }
  elseif ($methodname == "questionnaire.submit") {
    drupal_set_message(t("going to do @method", array('@method' => $methodname)));
    //$results .= questionaire_question_submitquestions($jsonarray['questions'],$jsonarray['qnid'],$jsonarray['contextnid'] );
    $result .= kpr($jsonarray['questions'], TRUE);
    $results .= questionaire_question_submitquestions(array(340, 'Yes'), 556, 460 );
    drupal_set_message(t("result @results", array('@results' => $results)));
  }
  if ($server_info) {
    chdir($server_root);
  }
  return $result;
}

function devtrack_module_init() {
  global $user;
  // Make sure the content_access per_node option is set for node type fieldtrip.
  // It is required for the fieldtrip approval workflow.
  if (module_exists(content_access)) {
    $content_access_settings = content_access_get_settings();
    if (content_access_get_settings('per_node', 'fieldtrip') == 0) {
      $content_access_settings['per_node']['fieldtrip'] = 1;
      // $content_access_settings['priority']['fieldtrip'] = 1;
      content_access_set_settings($content_access_settings);
    }
  }
  // Suppress the admin menu on the mobile website.
  if (devtrack_module_ismobile()) {
    admin_menu_suppress();
  }
  // redirect the /user page to the user profile page
  $arg1 = arg(1);
  if ((arg(0) == 'user') && !isset($arg1) && $user->uid > 0) {
    drupal_goto('user/me');
  }

}

function devtrack_module_ismobile() {
  global $base_url;
  $mobile_url = variable_get('mobile_tools_mobile_url', 'http://m.devtrac.jan');
  return (trim($mobile_url) == trim($base_url));
}

function devtrack_module_menu() {
  $items['devtrac/bbsync/%node'] = array(
    'title' => 'Sync Trip',
    'page callback' => 'devtrack_module_bbsync',
    'page arguments' => array(2),
  //  'access callback' => TRUE,
    'access arguments' => array('sync all bbsync'), // TODO Temporary, implement callback to detiremen 'sync own bbsync'
  );
  $items['devtrac/addplacetofieldtrip/%'] = array(
    'title' => 'Add Place to Fieldtrip',
    'page callback' => 'devtrack_module_addplacefieldtotrip',
    'page arguments' => array(2),
    'access callback' => TRUE, //'node_access',
//    'access arguments' => array('update', 3), // this is not working correctly.
    'type' => MENU_CALLBACK,
  );
  $items['devtrac/mycurrentfieldtrip'] = array(
    'title' => 'My Current Fieldtrip',
    'page callback' => 'devtrack_module_gotofieldtrip',
    'access callback' => 'devtrack_module_currentfieldtrip_access',
  );
  $items['homepage'] = array(
    'title' => 'Homepage',
    'page callback' => 'devtrack_module_homepage',
    'access callback' => TRUE,
  );
  $items['devtrac/getfeatureinfo'] = array(
    'page callback' => 'devtrack_module_createplace',
    'type' => MENU_CALLBACK,
    'access arguments' => array('create place content'),
  );
  $items['node/%node/addplaceform'] = array(
    'title' => 'Add Place to Trip',
    'page callback' => 'devtrack_module_pageaddplaceform',
    'page arguments' => array(1),
    'access callback' => 'devtrack_module_pageaddplaceform_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  //    'type' => MENU_NORMAL_ITEM,
  );
  $items['node/%node/addcomment'] = array(
    'title' => 'Add Comment',
    'page callback' => 'devtrack_module_gotocommentform',
    'page arguments' => array(1),
    'access callback' => 'devtrack_module_gotocommentform_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['m_action_item/%node/add_comment'] = array(
    'title' => 'Add Comment',
    'page callback' => 'devtrack_module_actionitemcommentform',
    'page arguments' => array(1),
    'access callback' => 'devtrack_module_actionitemcommentform_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['m_report_item/%node/add_picture'] = array(
    'title' => 'Add Picture',
    'page callback' => 'devtrack_module_reportitemaddpicture',
    'page arguments' => array(1),
    'access callback' => 'devtrack_module_reportitemaddpicture_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['m_report_item/%node/add_action_item'] = array(
    'title' => 'Add Action',
    'page callback' => 'devtrack_module_reportitemaddactionitem',
    'page arguments' => array(1),
    'access callback' => 'devtrack_module_reportitemaddactionitem_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  $items['node/%node/setstatus/%'] = array(
    'title' => 'Set Status',
    'page callback' => 'devtrack_module_fieldtrip_setstatus',
    'page arguments' => array(1, 3),
    'access callback' => 'devtrack_module_fieldtrip_setstatus_access',
    'access arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function devtrack_module_gotocommentform_access($actionitem = NULL) {

  $result = ($fieldtrip->type == "actionitem");
  if (!$result) {
    return FALSE;
  }
  $result = $result && ($actionitem->comment == 2) &&  (user_access("post comments") || user_access("post comments without approval"));
  return TRUE;
}

function devtrack_module_gotocommentform($actionitem = NULL) {
  drupal_goto('node/'. $actionitem->nid, NULL , 'comment-form');
}


function devtrack_module_actionitemcommentform_access($actionitem = NULL) {
  $result = ($actionitem->type == "actionitem");
  if (!$result) {
    return FALSE;
  }
  $result = $result && ($actionitem->comment == 2) &&  (user_access("post comments") || user_access("post comments without approval"));
  return TRUE;
}

function devtrack_module_actionitemcommentform($actionitem = NULL) {
  return drupal_get_form('comment_form', array('nid' => $actionitem->nid), $actionitem->title);
}

function devtrack_module_reportitemaddpicture_access($reportitem = NULL) {
  $result = ($reportitem->type == "ftritem");
  if (!$result) {
    return FALSE;
  }
  $result = $result && (user_access("edit own ftritem content"));
  return TRUE;
}

function devtrack_module_reportitemaddpicture($reportitem = NULL) {
  drupal_goto('node/'. $reportitem->nid .'/edit/field_ftritem_images');
}

function devtrack_module_reportitemaddactionitem_access($reportitem = NULL) {
  $result = ($reportitem->type == "ftritem");
  if (!$result) {
    return FALSE;
  }
  $result = $result && (user_access("create actionitem content"));
  return TRUE;
}

function devtrack_module_reportitemaddactionitem($reportitem = NULL) {
  global $user;
  $actionitem = new stdClass();
  $actionitem->type = 'actionitem';
  $actionitem->title = t('Click "Edit Title" below to change the title');
  $actionitem->field_actionitem_followuptask[0]['value'] = t('Replace this with an appropriate description.');
  $actionitem->field_actionitem_responsible[0]['uid'] = $user->uid;
  $actionitem->field_actionitem_due_date[0]['value'] = date('Y-m-dT00:00:00');
  $actionitem->field_actionitem_status[0]['value'] = 1;
  if ($reportitem->field_ftritem_place[0]['nid'] > 0 ) {
    $actionitem->field_actionitem_resp_place[0]['nid'] = $reportitem->field_ftritem_place[0]['nid'];
  }
  $actionitem->field_actionitem_severity[0]['value'] = 2;
  $actionitem->field_actionitem_ftreportitem[0]['nid'] = $reportitem->nid;
  $actionitem->comment = 2;
  $actionitem->uid = $user->uid;
  node_save($actionitem);
  drupal_goto('m_action_item/'. $actionitem->nid);
}

/*
 * Determine the homepage
 */
function devtrack_module_homepage() {
  global $user;

  if (devtrack_module_ismobile()) { // We're on the mobile website.
    if ($user->uid == 0) { // The user is "Anonymous".
      $query = array('destination' => 'homepage');
      drupal_goto('user', $query);
    }
    if (in_array('unicef user (Mobile)', $user->roles)) { // We're dealing with a mobile user.
      if ($mytrip = devtrack_module_getcurrentfieldtrip()) { // This user has a field trip scheduled for today.
        drupal_goto('m_field_trip/'. $mytrip);
      }
      else { // The user does not have a field trip scheduled for today.
        return 'You do not have a fieldtrip scheduled for today. You have to go to the main website to create a new or reschedule an existing fieldtrip.';
      }
    }
    else { // We're dealing with a non-mobile user.
      return 'You do not have a mobile account on this website. Please contact the site administrator to get one.';
    }
  }
  else { // We're on the main website.
    $view = views_get_view('field_trip_report_items');
    return $view->preview('page_1', array('all'));  }
}

/*
 * Navigates user to his current fieldtrip, if he has one
 */
function devtrack_module_gotofieldtrip() {
  global $user;

  $mytrip = devtrack_module_getcurrentfieldtrip();
  if (devtrack_module_ismobile()) { // We're on the mobile website.
    drupal_goto('m_field_trip/'. $mytrip);
  }
  else {
    drupal_goto('node/'. $mytrip);
  }
}

/*
 *   Adds a place to a fieldtrip, not ajax-proof, just a URL
 */

function devtrack_module_addplacefieldtotrip($placenid, $fieldtripnid = NULL, $reporttype = NULL) {
  $message = _devtrack_module_addplacefieldtotrip_helper($placenid, $fieldtripnid, $reporttype);
  $object = new stdClass();
  $object->content = $message;// $html.drupal_render($node->content[$field_name]);
  drupal_json($object);
  exit();
}

function _devtrack_module_addplacefieldtotrip_helper($placenid, $fieldtripnid = NULL, $reporttype = NULL) {
  global $user;
  $message = "";
  $place = node_load($placenid);
  if ($place->type != 'place') {
   // lets supress this message, you should not be here in the first place
   // the BBsync code unfortunately still triggers this
   // $message .= "Sorry, that is not a Place that you are attaching to the Field Trip.";
  }
  else {
    if (isset($fieldtripnid) && is_numeric($fieldtripnid)) {
      $fieldtrip = node_load($fieldtripnid);
      if ($fieldtrip->type != 'fieldtrip') {
        // lets supress this message, you should not be here in the first place
        // the BBsync code unfortunately still triggers this
        // $message .= "Sorry, that is not a Field Trip that you are attaching this place to.";
      }
      else {
        foreach ($fieldtrip->field_fieldtrip_places as $tpplace) {
          if ($tpplace['nid'] == $placenid) {
//            $sql = "SELECT ftr.nid FROM content_type_ftritem ftr WHERE ftr.field_ftritem_field_trip_nid = %d AND ftr.field_ftritem_place_nid = %d";
//            $ftrnid = db_result(db_query($sql, $fieldtripnid, $placenid));
//            watchdog("reinier", "ftrnid " . $ftrnid);
//            if ($ftrnid > 0) {
//              $message .= "This place is already attached to the field trip " . $fieldtrip->title;
//            }
            $sql = "SELECT ftr.nid FROM {content_type_ftritem} ftr INNER JOIN {term_node} tn ON ftr.nid = tn.nid WHERE ftr.field_ftritem_field_trip_nid = %d AND ftr.field_ftritem_place_nid = %d AND tn.tid = %d";
            $ftrnid = db_result(db_query($sql, $fieldtripnid, $placenid, $reporttype));
            watchdog("reinier", "ftrnid " . $ftrnid);
            if ($ftrnid > 0) {
              $term = taxonomy_get_term($reporttype);
              $message .= "There is already a ". $term->name ." planned to this place during the field trip " . $fieldtrip->title;
            }
            break;
          }
        }
        if ($message == "") {
          $fieldtrip->field_fieldtrip_places[$placenid]['nid'] = $placenid;
          node_save($fieldtrip);
          $placetype = '';
          if (count($place->taxonomy) > 0) {
            foreach ($place->taxonomy as $term) {
              if ($term->vid == 1) { // place type vocabulary
                $placetype = ' '. $term->name;
              }
            }
          }
          $ftr = new stdClass();
          $ftr->type = 'ftritem';
//          $vocabulary = devtrack_module_get_vocabulary_by_name('Site Report Type'); // Alert:  Hardcode vocabulary name
//          $terms = devtrack_module_get_term_by_name_vid('Site Visit', $vocabulary->vid); // Alert:  Hardcode term name
//          $ftr->taxonomy = array($terms[0]->tid => $terms[0]);
          $term = taxonomy_get_term($reporttype);
          $ftr->title = $term->name .' at '. $place->title . $placetype;
          $ftr->taxonomy = array($reporttype => $term);
          $ftr->field_ftritem_field_trip[0]['nid'] = $fieldtrip->nid;
          $ftr->field_ftritem_place[0]['nid'] = $placenid;
          $ftr->field_ftritem_public_summary[0]['value'] = t('Please Provide a small summary for the public.');
          $ftr->field_ftritem_narrative[0]['value'] = t('Please provide a full report.');
          $ftr->field_ftritem_status[0]['value'] = 'In Progress';
          $ftr->uid = $user->uid;
          $ftr->status = 1;
          $ftr->comment = 0;

          node_save($ftr);

          // for when we go ajax messages:  $message .= "Attached the " .$place->title . ' to '. l($fieldtrip->title, 'node/'. $fieldtrip->nid);
          $message .= 'Attached location '. $place->title . ' to '. $fieldtrip->title;
        }
      }
    }
  }
  return $message;
}

function devtrack_module_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'comment_form':
      if ((arg(0) == 'm_action_item') && (is_numeric(arg(1))) && (arg(2) == 'add_comment')) {
        $form['#redirect'] = 'm_action_item/'. arg(1) . '/comments';
        $form['#action'] = '';
        $form['preview'] = NULL;
      }
      break;
    case 'place_node_form':
      // Set default district on create location page.
      $destination = drupal_get_destination();
      if ((arg(0) == "node") && (arg(1) == "add") && (arg(2) == "place") && (trim($destination) != "")) {
        $args = explode("%2F", $destination);
        $district = $args[1];
        $form['taxonomy'][6]['#default_value'] = $district;
      }
      // Make the Place Type field required on places/locations
      $form['taxonomy'][1]['#required'] = 1;
      $form['taxonomy'][1]['#attributes'] = array('class' => 'required');
    case 'fieldtrip_node_form':
    case 'ftritem_node_form':
    case 'actionitem_node_form':
      $arg3 = arg(3);
      if ((arg(0) == 'node') && (is_numeric(arg(1))) && (arg(2) == 'edit')) {
        if (empty($arg3)) {
          break;
        }
        switch ($form_id) {
          case 'fieldtrip_node_form':
            $form['#redirect'] = 'm_field_trip/'. arg(1);
            break;
          case 'ftritem_node_form':
            $form['#redirect'] = 'm_report_item/'. arg(1);
            break;
          case 'place_node_form':
            $form['#redirect'] = 'm_place/'. arg(1);
            break;
          case 'actionitem_node_form':
            $form['#redirect'] = 'm_action_item/'. arg(1);
            break;
          default:
        }
        foreach ($form as $field_name => $field_value) {
          if (strstr($field_name, 'field_') == $field_name) {
            if ($field_name == arg(3)) {
              drupal_set_title(t('Edit @title'. array('@title', $field_value['#title'])));
            }
            else {
              $form[$field_name] = NULL;
            }
          }
        }
        if (($form_id != 'actionitem_node_form') || ($arg3 != 'title') || (t($form['#node']->title) != t('Click "Edit Title" below to change the title'))) {
          $form['title'] = NULL;
        }
        $form['taxonomy'] = NULL;
      }
      break;
  }
}

function devtrack_module_form_ftritem_node_form_alter(&$form, &$form_state) {
  $form['#pre_render'][] = 'devtrack_module_ftritem_hide_place_and_fieldtrip_fields';
}

function devtrack_module_ftritem_hide_place_and_fieldtrip_fields(&$form) {
  // Change title depending on the type of Site Report we're creating.
  if ((arg(0) == "node") && (arg(1) == "add") && (arg(2) == "ftritem")) {
    $destination = drupal_get_destination();
    if (trim($destination) != "") {
      if ((arg(0) == "node") && (arg(1) == "add") && (arg(2) == "ftritem") && (trim($destination) != "")) {
        $args = explode("%2F", $destination);
//        $params = explode("%26", $args[2]);
//        $tid = substr($params[0], strpos($params[0], '%3D') + 3);
        $tid = $args[3];
        $addreporttype = db_fetch_object(db_query("SELECT vid, name FROM {term_data} WHERE tid = %d", $tid));
        drupal_set_title(t('Create @name', array('@name' => $addreporttype->name)));
      }
    }
  }

  // We're editing an existing site report
  if ((arg(0) == "node") && (is_numeric(arg(1))) && (arg(2) == "edit")) {
    $vids = array();
    $vocabularies = taxonomy_get_vocabularies('ftritem'); // ALERT: Hardcoded node_type machine name
    foreach ($vocabularies as $vocabulary) {
      $vids[$vocabulary->vid] = $vocabulary->vid;
      if ($vocabulary->name == 'Site Report Type') {
        $editreporttype = new stdClass();
        $editreporttype->vid = $vocabulary->vid;
        $terms = array_values($form['#node']->taxonomy);
        $editreporttype->name = $terms[0]->name;
      }
    }
  }

  // Change the text on the more button under the images field
  $form['field_ftritem_images']['field_ftritem_images_add_more']['#value'] = 'Add another photo';

  // We are going to hide some fields. Admin is allowed to see everything, so return the form immediately.
  global $user;
  if (in_array('administrator', array_values($user->roles))) { // OR with ($user->uid == 1) to also include site admin
    return $form;
  }

  // We're back at creating a new site report
  if ((arg(0) == "node") && (arg(1) == "add") && (arg(2) == "ftritem")) {
    // Hide/Show certain fields according to the Type of Site Report we're creating
    switch ($addreporttype->name) {
      case 'Site Visit':
        // Is done in code, so no hiding/showing
        break;
      case 'Roadside Observation':
        $form['field_ftritem_place']['#prefix'] = '<div class="devtrachidefield">';
        $form['field_ftritem_lat_long']['#prefix'] = '<div class="devtracshowfield">';
        $form['taxonomy'][1]['#prefix'] = '<div class="devtrachidefield">'; // Alert: Hardcoded vocabulary id
        $form['taxonomy'][7]['#prefix'] = '<div class="devtrachidefield">'; // Alert: Hardcoded vocabulary id
        $form['field_ftritem_place']['#suffix'] = '</div>';
        $form['field_ftritem_lat_long']['#suffix'] = '</div>';
        $form['taxonomy'][1]['#suffix'] = '</div>'; // Alert: Hardcoded vocabulary id
        $form['taxonomy'][7]['#suffix'] = '</div>'; // Alert: Hardcoded vocabulary id
        break;
      case 'Human Interest Story':
        $form['field_ftritem_place']['#prefix'] = '<div class="devtracshowfield">';
        $form['field_ftritem_lat_long']['#prefix'] = '<div class="devtracshowfield">';
        $form['taxonomy'][1]['#prefix'] = '<div class="devtrachidefield">'; // Alert: Hardcoded vocabulary id
        $form['taxonomy'][7]['#prefix'] = '<div class="devtrachidefield">'; // Alert: Hardcoded vocabulary id
        $form['field_ftritem_place']['#suffix'] = '</div>';
        $form['field_ftritem_lat_long']['#suffix'] = '</div>';
        $form['taxonomy'][1]['#suffix'] = '</div>'; // Alert: Hardcoded vocabulary id
        $form['taxonomy'][7]['#suffix'] = '</div>'; // Alert: Hardcoded vocabulary id
        break;
    }
  }

  // We're editing an existing site report
  if ((arg(0) == "node") && (is_numeric(arg(1))) && (arg(2) == "edit")) {
    // Hide/Show certain fields according to the Type of Site Report we're editing
    switch ($editreporttype->name) {
      case 'Site Visit':
        if (isset($form['field_ftritem_place'][0]['nid']['nid']['#value']) && ($form['field_ftritem_place'][0]['nid']['nid']['#value'] != '')) {
          $form['field_ftritem_place']['#prefix'] = '<div class="devtrachidefield">';
          $form['taxonomy'][7]['#prefix'] = '<div class="devtrachidefield">'; // Alert: Hardcoded vocabulary id
          $form['field_ftritem_lat_long']['#prefix'] = '<div class="devtrachidefield">';
        }
        else {
          $form['field_ftritem_place']['#prefix'] = '<div class="devtracshowfield">';
          $form['field_ftritem_lat_long']['#prefix'] = '<div class="devtracshowfield">';
          $form['taxonomy'][7]['#prefix'] = '<div class="devtracshowfield">'; // Alert: Hardcoded vocabulary id
        }
        $form['taxonomy'][1]['#prefix'] = '<div class="devtrachidefield">'; // Alert: Hardcoded vocabulary id
        $form['field_ftritem_place']['#suffix'] = '</div>';
        $form['field_ftritem_lat_long']['#suffix'] = '</div>';
        $form['taxonomy'][1]['#suffix'] = '</div>'; // Alert: Hardcoded vocabulary id
        $form['taxonomy'][7]['#suffix'] = '</div>'; // Alert: Hardcoded vocabulary id
        break;
      case 'Roadside Observation':
        $form['field_ftritem_place']['#prefix'] = '<div class="devtrachidefield">';
        $form['field_ftritem_lat_long']['#prefix'] = '<div class="devtracshowfield">';
        $form['taxonomy'][1]['#prefix'] = '<div class="devtrachidefield">'; // Alert: Hardcoded vocabulary id
        $form['taxonomy'][7]['#prefix'] = '<div class="devtrachidefield">';
        $form['field_ftritem_place']['#suffix'] = '</div>';
        $form['field_ftritem_lat_long']['#suffix'] = '</div>';
        $form['taxonomy'][1]['#suffix'] = '</div>'; // Alert: Hardcoded vocabulary id
        $form['taxonomy'][7]['#suffix'] = '</div>';
        break;
      case 'Human Interest Story':
        $form['field_ftritem_place']['#prefix'] = '<div class="devtracshowfield">';
        $form['field_ftritem_lat_long']['#prefix'] = '<div class="devtracshowfield">';
        $form['taxonomy'][1]['#prefix'] = '<div class="devtrachidefield">'; // Alert: Hardcoded vocabulary id
        $form['taxonomy'][7]['#prefix'] = '<div class="devtrachidefield">';
        $form['field_ftritem_place']['#suffix'] = '</div>';
        $form['field_ftritem_lat_long']['#suffix'] = '</div>';
        $form['taxonomy'][1]['#suffix'] = '</div>'; // Alert: Hardcoded vocabulary id
        $form['taxonomy'][7]['#suffix'] = '</div>';
        break;
    }
  }

  // Only show the Field Trip field if it's empty
  if (isset($form['field_ftritem_field_trip'][0]['nid']['nid']['#value']) && ($form['field_ftritem_field_trip'][0]['nid']['nid']['#value'] != '')) {
    $form['field_ftritem_field_trip']['#prefix'] = '<div class="devtrachidefield">';
  }
  else {
    $form['field_ftritem_field_trip']['#prefix'] = '<div class="devtracshowfield">';
  }
  $form['field_ftritem_field_trip']['#suffix'] = '</div>';

  return $form;
}

function devtrack_module_form_fieldtrip_node_form_alter(&$form, &$form_state) {
  $form['#pre_render'][] = 'devtrack_module_fieldtrip_hide_user_field';
}

function devtrack_module_fieldtrip_hide_user_field(&$form) {
  // Change the text on the more button under the places field.
  $form['field_fieldtrip_places']['field_fieldtrip_places_add_more']['#value'] = 'Add another place';
  global $user;
  if (in_array('administrator', array_values($user->roles))) {
    return $form;
  }

  if (isset($form['field_fieldtrip_user'][0]['#value']['uid'])) {
    $form['field_fieldtrip_user']['#prefix'] = '<div class="devtrachidefield">';
  }
  else {
    $form['field_fieldtrip_user']['#prefix'] = '<div class="devtracshowfield">';
  }
  $form['field_fieldtrip_user']['#suffix'] = '</div>';

  $form['field_fieldtrip_status']['#prefix'] = '<div class="devtrachidefield">';
  $form['field_fieldtrip_status']['#suffix'] = '</div>';

  $form['field_fieldtrip_places']['#prefix'] = '<div class="devtrachidefield">';
  $form['field_fieldtrip_places']['#suffix'] = '</div>';

  return $form;
}

function devtrack_module_form_actionitem_node_form_alter(&$form, &$form_state) {
  $form['#pre_render'][] = 'devtrack_module_actionitem_hide_place_and_ftritem_fields';
}

function devtrack_module_actionitem_hide_place_and_ftritem_fields(&$form) {
  // Change the text on the more button under the responsible persons field.
  $form['field_actionitem_responsible']['field_actionitem_responsible_add_more']['#value'] = 'Add another person';
  global $user;
  if (in_array('administrator', array_values($user->roles))) {
    return $form;
  }

  if (isset($form['field_actionitem_resp_place'][0]['nid']['nid']['#value'])) {
    $form['field_actionitem_resp_place']['#prefix'] = '<div class="devtrachidefield">';
  }
  else {
    $form['field_actionitem_resp_place']['#prefix'] = '<div class="devtracshowfield">';
  }
  $form['field_actionitem_resp_place']['#suffix'] = '</div>';

  if (isset($form['field_actionitem_ftreportitem'][0]['nid']['nid']['#value'])) {
    $form['field_actionitem_ftreportitem']['#prefix'] = '<div class="devtrachidefield">';
  }
  else {
    $form['field_actionitem_ftreportitem']['#prefix'] = '<div class="devtracshowfield">';
  }
  $form['field_actionitem_ftreportitem']['#suffix'] = '</div>';
  return $form;
}

function devtrack_module_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;
  global $base_url;
  switch ($op) {
    case 'list' :
      $blocks[0]['info'] = t('Devtrac Create Links');
      $blocks[1]['info'] = t('Devtrac Legend');
      $blocks[2]['info'] = t('Upload Picture Reminder');
      $blocks[3]['info'] = t('Fieldtrip Approval Workflow');
      $blocks[4]['info'] = t('Fieldtrip Status');
      $blocks[5]['info'] = t('Homepage Counters');
      return $blocks;
      break;
    case 'view' :
      $block = array();
      switch ($delta) {
        case 0:
          if ((user_is_logged_in()) && (arg(0) == 'node') && (is_numeric(arg(1)))) {
            $localnode = node_load(arg(1));
            $localusername = $localnode->name;
            $localuser = user_load($localnode->uid);
            if (user_access('create actionitem content')) {
              if ($localusername == $user->name) {

                /* Nice, action items on places, but not supported
                if ( $localnode->type == 'place') {
                  $options = Array(
                    'edit[field_actionitem_resp_place][nid][value]'  => $localnode->nid,
                    'edit[field_actionitem_responsible][uid][value]' => $localuseruid,
                    'html'  => TRUE,
                  );
                  // no, not without a report item!
                  // $result .= '<li>'. l('<button type="button">Add Action Item</button>', 'node/add/actionitem', Array('query'=> $options, 'html'  => TRUE)) .'</li>';
                }
                */
                if ($localnode->type == 'ftritem') {
                  $options = Array(
                    "edit[field_actionitem_ftreportitem][0][nid][nid]"  => "[nid:". $localnode->nid ."]",
                    "edit[field_actionitem_responsible][0][uid][uid]" => $localuser->name,
                  );
                  if ($localnode->field_ftritem_place[0]['nid'] > 0) {
                    $options["edit[field_actionitem_resp_place][0][nid][nid]"]  = "[nid:". $localnode->field_ftritem_place[0]['nid'] . "]";
                  }

/*                  if (_devtrack_module_isinternetexplorer()) {
                    $result .= '<li>' . l('<div class="form-submit">Add Action Item</div>', 'node/add/actionitem', Array('query'=> $options, 'html'=> TRUE)) . '</li>';
                  }
                  else {
                    $result .= '<li>' . l('<button type="button">Add Action Item</button>', 'node/add/actionitem', Array('query'=> $options, 'html'  => TRUE)) . '</li>';
                  }
                  */
                  $result .= _devtrack_module_getbutton('Add Action Item', 'node/add/actionitem', $options);
                }
              }
            }

            if (user_access('submit questions')) {
              if ($localusername == $user->name) {
                if ( $localnode->type == 'ftritem') {
/*                  if (_devtrack_module_isinternetexplorer()) {
                    $result .= '<li>' . l('<div class="form-submit">Answer Questions</div>', 'node/'. $localnode->nid .'/questions/addsubmission', Array('html'=> TRUE)) . '</li>';
                  }
                  else {
                    $result .= '<li>' . l('<button type="button">Answer Questions</button>', 'node/'. $localnode->nid .'/questions/addsubmission', Array('html'  => TRUE)) . '</li>';
                  }
                  */
                  $result .= _devtrack_module_getbutton('Answer Questions', 'node/'. $localnode->nid .'/questions/addsubmission');
                }
              }
            }

            // this is not spitting anything out at the moment
            /*
            if ($localnode->type == "place") {
            	if (!(devtrack_module_getcurrentfieldtrip() > 0)) {
            		// Let's just not show this.
//            		$result .= '<li>'. "You can not add this place to your Field Trip, because you have none.". '</li>';
              } else {
                if (user_access('create fieldtrip content', $localuser)) {
                  $options = Array(
                    'edit[field_fieldtrip_user][0][uid][uid]'  => $localuser,
//                    'html'  => TRUE,
                  );
                  // TODO: remove button when place is already in list of places. (And show some nice: 'You are about to visit this place' link to the FT
                  // this needs ajax, so disabled for now
                  // TODO: include wmsgetfeatureinfo.js file and make sure this gets fired on pageload.
                  //    $('.getfeatureaddlink').bind("click",Drupal.openlayers.openlayers_behavior_wmsgetfeatureinfo.click);

                  $attribs = Array(
                    'class' => 'getfeatureaddlink'
                    );

                  $result .= '<li>'. l('<button type="button">Add this place to your Current Field Trip</button>', 'devtrac/addplacetofieldtrip/'.$localnode->nid .'/'. devtrack_module_getcurrentfieldtrip(), Array('query'=> $options, 'attributes' => $attribs, 'html'  => TRUE)) .'</li>';
                }
              }
            }

            */

          }
          elseif ((user_is_logged_in()) && (arg(0) == 'user') && (is_numeric(arg(1) | arg(1) == 'me'))) {
            if (is_numeric(arg(1))) {
              $localuser = user_load(arg(1));
              $localuseruid = arg(1);
            }
            else {
              $localuser = $user;
              $localuseruid = $user->uid;
              $localusername = $user->name;
            }
            if (user_access('create fieldtrip content', $localuser)) {
              $options = Array(
                'edit[field_fieldtrip_user][0][uid][uid]'  => $localuser->name,
                'html'  => TRUE,
              );
/*              if (_devtrack_module_isinternetexplorer()) {
                $result .= '<li>'. l('<div class="form-submit">Create Field Trip</div>', 'node/add/fieldtrip', Array('query'=> $options, 'html'=> TRUE)) . '</li>';
              }
              else {
                $result .= '<li>'. l('<button type="button">Create Field Trip</button>', 'node/add/fieldtrip', Array('query'=> $options, 'html'  => TRUE)). '</li>';
              }
              */
              $result .= _devtrack_module_getbutton('Create Field Trip', 'node/add/fieldtrip', $options);
            }
          }
          if ($result) {
            $result  = "<ul>". $result . "</ul>";
          }
          $block['title'] = "Devtrac Buttons";
          $block['content'] = $result;
          return $block;
        break;
        case 1:
          $block['subject'] = "";
          $block['content'] = '<img src="'. $base_url . '/sites/default/themes/devtrack_theme/images/legend.gif" alt="Map Legend"/>' ;
          return $block;
        break;
        case 2:
          if ((user_is_logged_in()) && (!($user->picture != "")) && (arg(1) === $user->uid)) {
            $block['subject'] = "";
            $block['content'] .= "Don't forget to Upload your " . l('Picture', '/user/'. $user->uid ."/edit", array('fragment' => 'edit-pass-pass2', 'external' => TRUE));
            return $block;
          }
          break;
        case 3:
          // Do the approval workflow.
          $arg2 = arg(2);
          if ((user_is_logged_in()) && (arg(0) == 'node') && (is_numeric(arg(1)))&& (!isset($arg2))) {
            $localnode = node_load(arg(1));
            if ($localnode->type == 'fieldtrip') {
              switch ($localnode->field_fieldtrip_status[0]['value']) {
                case 'In Progress':
                  if ($localnode->field_fieldtrip_user[0]['uid'] == $user->uid) { // User that went on the fieldtrip is the current user
// We put the following code in a new function called function _devtrack_module_getbutton().
//                    if (_devtrack_module_isinternetexplorer()) {
//                      $result .= '<li>' . l('<div class="form-submit">Submit Fieldtrip</div>', 'node/'. $localnode->nid .'/edit', Array('query'=> $options, 'html'=> TRUE)) . '</li>';
//                    }
//                    else {
//                      $result .= '<li>' . l('<button type="button">Submit Fieldtrip</button>', 'node/'. $localnode->nid .'/edit', Array('query'=> $options, 'html'  => TRUE)) . '</li>';
//                    }
// TO DO: Workflow: Redo when implementing the manager workflow
//                    $result .= _devtrack_module_getbutton('Submit Field Trip', 'node/'. $localnode->nid .'/setstatus/submit');
                    $result .= _devtrack_module_getbutton('Submit Field Trip', 'node/'. $localnode->nid .'/setstatus/approve');
                  }
                  break;
                case 'Submitted':
                  $profile = content_profile_load('user_profile', $localnode->field_fieldtrip_user[0]['uid']);
                  $manager = user_load($profile->field_user_superior[0]['uid']);
                  if ($manager->uid == $user->uid) { // Manager of the user that took the fieldtrip is the current user
// Comment out the previous 2 lines and uncomment the following line to have the buttons show on the fieldtrip user page instead of the manager page.
// Maybe we want to move this completely and approve in 1 step.
                  // if ($localnode->field_fieldtrip_user[0]['uid'] == $user->uid) { // User that went on the fieldtrip is the current user
                    $result .= _devtrack_module_getbutton('Approve Field Trip', 'node/'. $localnode->nid .'/setstatus/approve');
                    $result .= _devtrack_module_getbutton('Reject Field Trip', 'node/'. $localnode->nid .'/setstatus/reject');
                  }
                  break;
                case 'Approved':
                case 'Published':
                  break;
              }
            }
          }
          if ($result) {
            $result  = "<ul>". $result . "</ul>";
          }
          $block['title'] = "Fieldtrip Approval Workflow";
          $block['content'] = $result;
          return $block;
          break;
        case 4:
          // The Fieldtrip Status block.
//          $arg2 = arg(2);
          if ((user_is_logged_in()) && (arg(0) == 'node') && (is_numeric(arg(1)))) { // && (!isset($arg2))) {
            $localnode = node_load(arg(1));
            if ($localnode->type == 'fieldtrip') {
              switch ($localnode->field_fieldtrip_status[0]['value']) {
                case 'In Progress':
                  if ($localnode->field_fieldtrip_user[0]['uid'] == $user->uid) { // User that went on the fieldtrip is the current user
                    $result .= devtrac_module_get_fieldtrip_status($localnode);
                  }
                  break;
                case 'Submitted':
//                  $profile = content_profile_load('user_profile', $localnode->field_fieldtrip_user[0]['uid']);
//                  $manager = user_load($profile->field_user_superior[0]['uid']);
//                  if ($manager->uid == $user->uid) { // Manager of the user that took the fieldtrip is the current user
// Comment out the previous 2 lines and uncomment the following line to have the buttons show on the fieldtrip user page instead of the manager page.
// Maybe we want to move this completely and approve in 1 step.
//                  // if ($localnode->field_fieldtrip_user[0]['uid'] == $user->uid) { // User that went on the fieldtrip is the current user
//                    $result .= _devtrack_module_getbutton('Approve Field Trip', 'node/'. $localnode->nid .'/setstatus/approve');
//                    $result .= _devtrack_module_getbutton('Reject Field Trip', 'node/'. $localnode->nid .'/setstatus/reject');
//                  }
                  break;
                case 'Approved':
                case 'Published':
                  break;
              }
            }
          }
//          if ($result) {
//            $result  = "<ul>". $result . "</ul>";
//          }
          $block['title'] = "Fieldtrip Status";
          $block['content'] = $result;
          return $block;
          break;
        case 5:
          // The Homepage Counter Block.
          $result = devtrack_module_get_report_counts();
          $block['title'] = "Site Reports";
          $block['subject'] = "Site Reports";
          $block['content'] = $result;
          return $block;
          break;
      }
      break;
  }
}

function devtrack_module_currentfieldtrip_access() {
  $result = devtrack_module_getcurrentfieldtrip() > 0;
  return ($result);
}

function devtrack_module_getcurrentfieldtrip($account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  $thedate = date('Y-m-d');

  /* $sql = "SELECT node.nid AS nid
 FROM {node} node
 LEFT JOIN {content_type_fieldtrip} {node_data_field_fieldtrip_start_end_date} ON node.vid = node_data_field_fieldtrip_start_end_date.vid
 WHERE ((node.type in ('fieldtrip')) AND (node_data_field_fieldtrip_start_end_date.field_fieldtrip_user_uid = ". $account->uid ."))
    AND (
     (DATE_FORMAT(STR_TO_DATE(node_data_field_fieldtrip_start_end_date.field_fieldtrip_start_end_date_value, '%Y-%m-%%dT%T'), '%Y-%m-%%d') <= '". $thedate ."')
     OR
     (DATE_FORMAT(STR_TO_DATE(node_data_field_fieldtrip_start_end_date.field_fieldtrip_start_end_date_value2, '%Y-%m-%%dT%T'), '%Y-%m-%%d') >= '". $thedate ."')
 )";*/

  $sql = "SELECT node.nid AS nid FROM {node} node LEFT JOIN {content_type_fieldtrip} fieldtrip ON node.vid = fieldtrip.vid WHERE (node.type = 'fieldtrip' AND fieldtrip.field_fieldtrip_user_uid = ". $account->uid .") AND ( (DATE_FORMAT(STR_TO_DATE(fieldtrip.field_fieldtrip_start_end_date_value, '%Y-%m-%%dT%T'), '%Y-%m-%%d') <= '". $thedate ."') AND (DATE_FORMAT(STR_TO_DATE(fieldtrip.field_fieldtrip_start_end_date_value2, '%Y-%m-%%dT%T'), '%Y-%m-%%d') >= '". $thedate ."') )";

  $fieldtripnid = db_result(db_query($sql));

  return $fieldtripnid;
}


function devtrack_module_search_block_form($form) {
  $form['search_block_form_keys']['#value'] = 'Search...';
  $form['search_block_form_keys']['#attributes']['class'] = 'default-value';
  return drupal_render($form);
}


function devtrack_module_process_getfeatureinfo($layer, $geometry, $params, $args) {
  global $user; // this is needed to set the uid on the nodes we are about to create.
  $message = '';
  $mytrip = $args[2];
  $reporttype = $args[3];
  $fieldtrip = node_load($mytrip);
  if ($fieldtrip->type != 'fieldtrip') {
    return ("This is not a fieldtrip that you are linking the place to.");
    exit;
  }

  if ($mytrip > 0) {
    $placetype = $params['placetype'];
    unset($params['placetype']);
    $placetypeterm = devtrack_module_get_term_by_name_vid($placetype, 1);
    $fieldtrip = node_load($mytrip);

    $name = $params['name'];
    unset($params['name']);

    // first, let's check if this place already exists
    $uid = $params['id'];
    unset($params['id']);
    $uri = "http://www.devtrac.ug/places";
    $sql = "SELECT n.nid from {content_type_place} n WHERE n.field_place_unique_id_value = '%s' AND n.field_place_sourcelayer_value = '%s' AND n.field_place_sourceuri_value='%s'";
    $placenid = db_result(db_query(db_rewrite_sql($sql), $uid, $layer, $uri));
    if ($placenid > 0) {
      $message .= "The place was already known\n";
//      foreach($fieldtrip->field_fieldtrip_places as $place) {
//        if ($place['nid'] == $placenid) {
//          return "This place is already attached to the field trip " . $fieldtrip->title;
//        }
//      }
      // got that out of the way, let's move on
    }
    else {
      // Going to Create Place
      // First, let's make sure the placetype taxonomy term exists.
      if (!isset($placetypeterm[0]->tid)) {
        $form['name'] = $placetype;
        $form['vid'] = 1;
        taxonomy_save_term($form);
        $message .= "Created new Placetype '". $placetype . "'";
        $placetypeterm = devtrack_module_get_term_by_name_vid($placetype, 1);
      }
      $district = drupal_ucfirst(drupal_strtolower($params['district']));
      $vid = 6; // That is District
      $districtterm = devtrack_module_get_term_by_name_vid($district, $vid);
      unset($params['district']);
      $body = "";
      foreach ($params as $key => $value) {
        $body .= $key ." = ". $value . '<br/>';
      }
      $node = new stdClass();
      $node->title = $name;
      $node->type = 'place';
//      node_object_prepare($node);
      $node->body = $body;
      $node->field_place_unique_id[0]['value'] = $uid;
      $node->field_place_sourcelayer[0]['value'] = $layer;
      $node->field_place_sourceuri[0]['value'] = $uri;
      $node->uid = $user->uid;
      $node->field_place_lat_long[0]['openlayers_wkt'] = "GEOMETRYCOLLECTION(". str_replace(',', ' ', $geometry) . ")";
      $node->taxonomy = array($districtterm[0]->tid, $placetypeterm[0]->tid);
      $actionitem->comment = 0;

//      $node = node_submit($node);
      node_save($node);

//      taxonomy_node_save($node, $districtterm);
//      taxonomy_node_save($node, $placetypeterm);
      $placenid = $node->nid;
    }
    $fieldtrip->field_fieldtrip_places[$placenid]['nid'] = $placenid;
    node_save($fieldtrip);
/*
    $ftr = new stdClass();
    $ftr->type = 'ftritem';
    $ftr->title = 'Site Visit to '. $name;
    $ftr->field_ftritem_field_trip[]['nid'] = $fieldtrip->nid;
    $ftr->field_ftritem_place[]['nid'] = $placenid;
    $ftr->field_ftritem_public_summary[]['value'] = t('Please Provide a small summary for the public.');
    $ftr->field_ftritem_narrative[]['value'] = t('Please provide a full report.');
    $ftr->uid = $user->uid;
    node_save($ftr);
 */
    $message .= _devtrack_module_addplacefieldtotrip_helper($placenid, $mytrip, $reporttype);
    return $message;
  }
  else {
    $message .= 'You have to have selected a fieldtrip before selecting pages.';
    return $message;
  }
  $message .= "oh that is not good we did a getfeatureinfo request and had no outcome.";
  return $message;
}

function devtrack_module_pageaddplaceform_access($fieldtrip = NULL) {
  $result = ($fieldtrip->type == "fieldtrip");
  $result = $result && node_access("update", $fieldtrip);
  $result = $result && ($fieldtrip->field_fieldtrip_status[0]['value'] != 'Approved') && ($fieldtrip->field_fieldtrip_status[0]['value'] != 'Published');
  return $result;
}


function devtrack_module_pageaddplaceform($fieldtrip = NULL) {
  return drupal_get_form("devtrack_module_addplaceform", $fieldtrip);
}

function devtrack_module_addplaceform($form_state, $fieldtrip) {

  $form['title'] = array(
    '#title' => "title",
    '#value' => "Select Place to visit for Field Trip: ". $fieldtrip->title,
  );

  $vocabularies = taxonomy_get_vocabularies('ftritem'); // ALERT: Hardcoded node_type machine name
  foreach ($vocabularies as $vocabulary) {
    if ($vocabulary->name == 'Site Report Type') {
      $vid = $vocabulary->vid;
    }
  }
  $reporttypes = array();
  $terms = db_query("SELECT * FROM {term_data} WHERE vid = %d ORDER BY weight ASC", $vid);
  while ($term = db_fetch_object($terms)) {
    $reporttypes[] = $term->name;
  }
  $form['reporttype'] = array(
    '#title' => t('Site Report Type'),
    '#type' => 'radios',
    '#description' => 'Select the type of report you want to create.',
    '#options' => $reporttypes,
    '#default_value' => 0,
  );

  $districts = array();
  foreach ($fieldtrip->taxonomy as $district) {
    $districts[$district->tid] = $district->name;
  }
  $form['district'] = array(
    '#title' => t('District'),
    '#type' => 'select',
    '#description' => 'If you are creating a site visit or a human interest story, select the district where you want to search for places. (This field will be ignored for roadside observations.)',
    '#options' => $districts,
  );

  $placetypes = array();
  $placetypes[0] = 'Schools';
  $placetypes[1] = 'Health Facilities';
  $placetypes[2] = 'Water Points';
  $placetypes[3] = 'Other Locations';
  $placetypes[4] = 'None';
  $form['placetype'] = array(
    '#title' => t('Place Type'),
    '#type' => 'radios',
    '#description' => 'If you are creating a site visit or human interest story, select the type of the place you are looking for. "None" has no meaning for site visits and will behave as if you selected "Other Locations". (This field will be ignored for roadside observations.)',
    '#options' => $placetypes,
    '#default_value' => 0,
  );

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $fieldtrip->nid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

//  print($fieldtripnid);
  return $form;
}

function devtrack_module_addplaceform_validate($form, &$form_state) {

}

function devtrack_module_addplaceform_submit($form, &$form_state) {

  $vocabularies = taxonomy_get_vocabularies('ftritem'); // ALERT: Hardcoded node_type machine name
  foreach ($vocabularies as $vocabulary) {
    if ($vocabulary->name == 'Place Type') {
      $vidpt = $vocabulary->vid;
    }
    if ($vocabulary->name == 'Site Report Type') {
      $vidsrt = $vocabulary->vid;
    }
  }
  $placetypes = array();
  $terms = db_query("SELECT td.* FROM {term_data} td INNER JOIN {term_hierarchy} th ON td.tid = th.tid WHERE td.vid = %d AND th.parent = 0 ORDER BY td.weight DESC", $vidpt);
  while ($term = db_fetch_object($terms)) {
    $placetypes[] = $term->tid;
  }
  $reporttypes = array();
  $terms = db_query("SELECT * FROM {term_data} WHERE vid = %d ORDER BY weight ASC", $vidsrt);
  while ($term = db_fetch_object($terms)) {
    $reporttypes[] = $term->tid;
  }
  switch ($form_state['values']['reporttype']) {
    case 0: // Site Visit
      switch ($form_state['values']['placetype']) {
        case 0:
          drupal_goto('places/'. $form_state['values']['district'] . '/'. $form_state['values']['nid'] . '/'. $reporttypes[$form_state['values']['reporttype']] , 'layers=B0TTFFT');
        break;
        case 1:
          drupal_goto('places/'. $form_state['values']['district'] . '/'. $form_state['values']['nid'] . '/'. $reporttypes[$form_state['values']['reporttype']] , 'layers=B0TFTFT');
          break;
        case 2:
          drupal_goto('places/'. $form_state['values']['district'] . '/'. $form_state['values']['nid'] . '/'. $reporttypes[$form_state['values']['reporttype']] , 'layers=B0TFFTT');
          break;
        case 3:
        case 4:
          drupal_goto('places/'. $form_state['values']['district'] . '/'. $form_state['values']['nid'] . '/'. $reporttypes[$form_state['values']['reporttype']] , 'layers=B0TFFFT');
          break;
      }
      break;
    case 1:
      drupal_goto('node/add/ftritem', 'destination=places/'. $form_state['values']['district'] .'/'. $form_state['values']['nid'] .'/'. $reporttypes[$form_state['values']['reporttype']] .'&edit[taxonomy]['. $vidsrt .']='. $reporttypes[$form_state['values']['reporttype']] .'&edit[field_ftritem_field_trip][0][nid][nid]=[nid:'. $form_state['values']['nid'] .']');
//      drupal_goto('node/add/ftritem', 'edit[taxonomy]['. $vidsrt .']='. $reporttypes[$form_state['values']['reporttype']] .'&edit[field_ftritem_field_trip][0][nid][nid]=[nid:'. $form_state['values']['nid']. ']');
      break;
    case 2:
      switch ($form_state['values']['placetype']) {
        case 0:
          drupal_goto('places/'. $form_state['values']['district'] . '/'. $form_state['values']['nid'] . '/'. $reporttypes[$form_state['values']['reporttype']], 'layers=B0TTFFT');
          break;
        case 1:
          drupal_goto('places/'. $form_state['values']['district'] . '/'. $form_state['values']['nid'] . '/'. $reporttypes[$form_state['values']['reporttype']], 'layers=B0TFTFT');
          break;
        case 2:
          drupal_goto('places/'. $form_state['values']['district'] . '/'. $form_state['values']['nid'] . '/'. $reporttypes[$form_state['values']['reporttype']], 'layers=B0TFFTT');
          break;
        case 3:
          drupal_goto('places/'. $form_state['values']['district'] . '/'. $form_state['values']['nid'] . '/'. $reporttypes[$form_state['values']['reporttype']], 'layers=B0TFFFT');
          break;
        case 4:
          drupal_goto('node/add/ftritem/', 'destination=places/'. $form_state['values']['district'] .'/'. $form_state['values']['nid'] .'/'. $reporttypes[$form_state['values']['reporttype']] .'&edit[taxonomy]['. $vidsrt .']='. $reporttypes[$form_state['values']['reporttype']] .'&edit[field_ftritem_field_trip][0][nid][nid]=[nid:'. $form_state['values']['nid'] .']');
//          drupal_goto('node/add/ftritem', 'edit[taxonomy]['. $vidsrt .']='. $reporttypes[$form_state['values']['reporttype']] .'&edit[field_ftritem_field_trip][0][nid][nid]=[nid:'. $form_state['values']['nid']. ']');
          break;
      }
    break;
  }

}



/**
 * Try to map a string to an existing term by name and vocabulary id.
 *
 * Shamelessly copied from Feeds. Did not want to create a dependency
 *
 *
 * Provides a case-insensitive and trimmed mapping, to maximize the likelihood
 * of a successful match limited by a vocabulary id.
 *
 * @param $name
 *   Name of the term to search for.
 *
 * @param $vid
 *   The vocabulary's ID.
 *
 * @return
 *   An array of matching term objects.
 */
function devtrack_module_get_term_by_name_vid($name, $vid) {
  $db_result = db_query(db_rewrite_sql("SELECT * FROM {term_data} t WHERE LOWER(t.name) = LOWER('%s') AND t.vid = %d", 't', 'tid'), trim($name), $vid);
  $result = array();
  while ($term = db_fetch_object($db_result)) {
    $result[] = $term;
  }
  return $result;
}

/*
 * Return the vocabulary object with the given name
 * or NULL if there is no vocabulary with the given name
 */
function devtrack_module_get_vocabulary_by_name($name) {
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vocabulary) {
    if ($vocabulary->name == $name) {
      return $vocabulary;
    }
  }
  return NULL;
}


function devtrack_module_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'ftritem') {
    switch ($op) {
      case 'delete':
        $placenid = $node->field_ftritem_place[0]['nid'];
        $fieldtripnid = $node->field_ftritem_field_trip[0]['nid'];
        $fieldtrip = node_load($fieldtripnid);
        if ($placenid > 0) {
          $sql = "DELETE from {content_field_fieldtrip_places} WHERE nid = %d AND field_fieldtrip_places_nid = %d";
          db_query($sql, $fieldtripnid, $placenid);
// re-adding inserts the trip report.
          $place = node_load($placenid);
          if (drupal_strlen($fieldtrip->title) > 0) {
            drupal_set_message(t('Removed @place from @fieldtrip'. array('@place' => $place->title, '@fieldtrip' => $fieldtrip->title)));
          }
        }
        $_REQUEST['destination'] = 'node/' . $fieldtripnid;
        break;
    }
  }
  if ($node->type == 'fieldtrip') {
    switch ($op) {
      case 'load':
        $node->oldstatus = $node->field_fieldtrip_status[0]['value'];
        break;
      case 'insert':
        $localuser = user_load($node->field_fieldtrip_user[0]['uid']);
        devtrack_module_fieldtrip_grant_update($node, $localuser);
        break;
      case 'presave':
        if (!isset($node->oldstatus)) {
          break;
        }
//        drupal_set_message('Status was '. $node->oldstatus);
        $owner = user_load($node->uid);
        $profile = content_profile_load('user_profile', $node->field_fieldtrip_user[0]['uid']);
        $localuser = user_load($node->field_fieldtrip_user[0]['uid']);
        $manager = user_load($profile->field_user_superior[0]['uid']);
        module_load_include('inc', 'content_access', 'content_access.rules');
        $status = $node->field_fieldtrip_status[0]['value'];
//        drupal_set_message('Status changed to '. $status);
        if ($node->oldstatus != $status) {
          switch ($status) {
            case 'In Progress':
              devtrack_module_fieldtrip_revoke_update($node, $manager);
              devtrack_module_fieldtrip_grant_update($node, $localuser);
//              devtrack_module_fieldtrip_grant_update($node, $owner);
              drupal_set_message(t("Field Trip is editable."));
              break;
            case 'Submitted':
              devtrack_module_fieldtrip_grant_update($node, $manager);
              drupal_set_message(t("Field Trip submitted for approval."));
              break;
            case 'Approved':
//              devtrack_module_fieldtrip_publish($node, TRUE);
              devtrack_module_fieldtrip_revoke_update($node, $manager);
              devtrack_module_fieldtrip_revoke_update($node, $localuser);
//              devtrack_module_fieldtrip_revoke_update($node, $owner);
              break;
          }
        }
//        unset($node->oldstatus);
        break;
      case 'update':
        // Moved this from pre-save to update. It updates the node_access table. Pre-save is to early for that.
        if (!isset($node->oldstatus)) {
          break;
        }
        $status = $node->field_fieldtrip_status[0]['value'];
//        drupal_set_message('Status changed to '. $status);
        if ($node->oldstatus != $status) {
          switch ($status) {
            case 'In Progress':
              break;
            case 'Submitted':
              break;
            case 'Approved':
              devtrack_module_fieldtrip_publish($node);
              drupal_set_message(t("Field Trip submitted."));
              break;
          }
        }
        unset($node->oldstatus);
        break;
      case 'delete':
        $sql = "SELECT n.nid FROM {node} n LEFT JOIN {content_type_ftritem} ftr ON n.nid=ftr.nid WHERE ftr.field_ftritem_field_trip_nid = %d";
        $db_result = db_query(db_rewrite_sql($sql), $node->nid);
        $result = array();
        while ($ftritemnid = db_fetch_object($db_result)) {
          $ftritem = node_load($ftritemnid->nid);
          node_delete($ftritemnid->nid);
        }
        $_REQUEST['destination'] = 'user/me';
        break;
    }
  }
  if ($node->type == 'place') {
    switch ($op) {
      case 'insert':
        $placenid = $node->nid;
        $nodearray = (array)$node;
        $destination = drupal_get_destination();
        $reporttype = substr($destination, strrpos($destination, '%2F') + 3);
        $fieldtripnid = substr(substr($destination, 0, strrpos($destination, '%2F')), strrpos(substr($destination, 0, strrpos($destination, '%2F')), '%2F') + 3);
        if (is_numeric($fieldtripnid) && is_numeric($reporttype)) {
          // todo: we can probably completely remove the relationship between Field Trip and Place
          // because we now either created the ftritem automatically here in this function
          // or, when coming from the mobile bb application, the BB will create an ftritem
          drupal_set_message(t("attaching the place to the fieldtrip"));
          $message = _devtrack_module_addplacefieldtotrip_helper($placenid, $fieldtripnid, $reporttype);
          drupal_set_message(t('@message', array('@message' => $message)));
        }
        break;
    }
  }
  if ($node->type == 'bbsync') {
drupal_set_message(t("its a bbsync and we will do " . $op));
    switch ($op) {
      case 'insert':
        drupal_set_message(t("We are inserting"));
        devtrack_module_bbsync($node); // This is untested
        break;
    }
  }
}

/**
 * Implementation of hook_taxonomy_menu_path().
 */
function devtrack_module_taxonomy_menu_path() {
  $output = array(
    'devtrack_module_path_custom_path' => t('Devtrac Path'),
  );

  return $output;
}

function devtrack_module_path_custom_path($vid, $tid) {
  return 'tripreports/map?placetype=' . $tid;
}

function devtrack_module_getcontext($nid) {
  $node = node_load($nid);
  return $node->field_ftritem_place[0]['nid'];
}

function _devtrack_module_getbutton($text, $path, $options = NULL) {
  if (isset($options)) {
    $params = Array('query' => $options, 'html' => TRUE);
  }
  else {
    $params = Array('html' => TRUE);
  }
  if (_devtrack_module_isinternetexplorer()) {
    $result .= '<li>'. l('<div class="form-submit">'. $text .'</div>', $path, $params) .'</li>';
  }
  else {
    $result .= '<li>'. l('<button type="button">'. $text .'</button>', $path, $params) .'</li>';
  }
  return $result;
}

function _devtrack_module_isinternetexplorer() {
        // $version = 6
//    drupal_set_message($_SERVER['HTTP_USER_AGENT']);
    if (isset($_SERVER['HTTP_USER_AGENT']) && (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') > 0)) { // || (strpos($_SERVER['HTTP_USER_AGENT'], 'KHTML') > 0 ))) {
      return TRUE;
    }
    else {
      return FALSE;
    }
}

function _devtrack_module_array_to_object($array = array()) {
  if (!empty($array)) {
    $data = FALSE;

    foreach ($array as $akey => $aval) {
      $data -> {$akey} = $aval;
    }

    return $data;
  }

  return FALSE;
}

function devtrack_module_environment() {
  $environments = array();
  $environments['test'] = array(
    'label' => t('Jan'),
    'description' => t('Test Environment for acceptance testing.'),
    'allowed' => array(
      'default' => TRUE,
    ),
  );
  $environments['jan'] = array(
    'label' => t('Jan'),
    'description' => t('Jans Development Machine.'),
    'allowed' => array(
      'default' => TRUE,
    ),
  );
  $environments['reinier'] = array(
    'label' => t('Reinier'),
    'description' => t('Reiniers Development Machine.'),
    'allowed' => array(
      'default' => TRUE,
    ),
  );
  return $environments;

}
/**
 * Implementation of hook_environment_switch().
 */
function devtrack_module_environment_switch($target_env, $current_env) {
  // Declare each optional development-related module
  $devel_modules = array(
    'bulk_export',
    'context_ui',
    'devel',
    'devel_generate',
    'devel_node_access',
    'imagecache_ui',
    'update',
    'spaces_ui',
    'views_ui',
    'stage_file_proxy',
    'environment_indicator',
    'openlayers_ui',
    'diff',
    'views_clone_display',
    'upgrade_status'
  );

  switch ($target_env) {
    case 'production':
      module_disable($devel_modules);
      variable_set("environment_indicator_enabled", "0");
      drupal_set_message(t('Disabled development modules'));
      variable_set("mobile_tools_desktop_url",  "http://www.devtrac.ug");
      _change_services_key("6825f0e79c87f6c930d8b252694ef1cf", "devtrac.ug");
      return;
    case 'test':
      module_disable($devel_modules);
      variable_set("environment_indicator_enabled", "0");
      drupal_set_message(t('disabled development modules'));
      /* Tell Mobile Tools where the site is */
      _change_services_key("ed189296f0507fde20b1b9863c6fc21a", "devtrac.org");
      variable_set("mobile_tools_desktop_url",  "http://test.devtrac.org");
      return;
    case 'development':
      module_enable($devel_modules);
      drupal_set_message(t('Enabled development modules'));
      /* Tell Mobile Tools where the site is */
      variable_set("mobile_tools_desktop_url",  "http://devtrac.mountbatten.net:8001");
      /* Enable Environment Indicator */
      variable_set("environment_indicator_color", "#45FA12");
      variable_set("environment_indicator_enabled", "1");
      variable_set("environment_indicator_position", "left");
      variable_set("environment_indicator_text", "Development Server");
      return;
    case 'jan':
      module_enable($devel_modules);
      drupal_set_message(t('Enabled development modules'));
      /* Tell Mobile Tools where the site is */
      variable_set("mobile_tools_desktop_url",  "http://devtrac.jan");
      /* Enable Environment Indicator */
      variable_set("environment_indicator_color", "green");
      variable_set("environment_indicator_enabled", "1");
      variable_set("environment_indicator_position", "left");
      variable_set("environment_indicator_text", "Jan Development Server");
      return;
    case 'reinier':
      module_enable($devel_modules);
      drupal_set_message(t('Enabled development modules'));
      /* Tell Mobile Tools where the site is */
      variable_set("mobile_tools_desktop_url",  "http://devtrac2.rei");
      /* Enable Environment Indicator */
      variable_set("environment_indicator_color", "red");
      variable_set("environment_indicator_enabled", "1");
      variable_set("environment_indicator_position", "left");
      variable_set("environment_indicator_text", "Reinier Development Server");
      return;
  }
}

function _change_services_key($key, $domain) {
  db_query("UPDATE {services_keys} SET kid = '%s'", $key);
  db_query("UPDATE {services_keys} SET domain = '%s'", $domain);
  db_query("UPDATE {services_key_permissions} SET kid = '%s'", $key);
}

function devtrack_module_fieldtrip_setstatus($node, $method) {
  $status = $node->field_fieldtrip_status[0]['value'];
//  drupal_set_message('Set Status to '. $status);
  switch ($method) {
    case 'submit':
//        drupal_set_message('submitting');
      if ($status == 'In Progress') {
//        drupal_set_message('changing value');
        $node->field_fieldtrip_status[0]['value'] = 'Submitted';
        node_save($node);
      }
      else {
        drupal_set_message(t('Already submitted.'));
      }
      break;
    case 'approve':
      if ($status == 'In Progress') {
        global $user;
        $node->field_fieldtrip_status[0]['value'] = 'Approved';
        $node->field_fieldtrip_approved_by[0]['uid'] = $user->uid;
        $node->field_fieldtrip_approval_date[0]['value'] = date('Y-m-j');
        node_save($node);
      }
      else {
        drupal_set_message(t('Already submitted.'));
      }
      // TO DO: Workflow: Redo when implementing the manager workflow
/*      if ($status == 'Submitted') {
        $node->field_fieldtrip_status[0]['value'] = 'Approved';
        node_save($node);
      }
      else {
        drupal_set_message('Already approved.');
      }
 */
      break;
    case 'reject':
      if ($status == 'Submitted') {
        $node->field_fieldtrip_status[0]['value'] = 'In Progress';
        node_save($node);
      }
      else {
        drupal_set_message(t('Already rejected.'));
      }
      break;
  }
  drupal_goto('node/'. $node->nid);
}

function devtrack_module_fieldtrip_setstatus_access($node, $status) {
  return TRUE;
}

function devtrack_module_fieldtrip_grant_update($node, $user) {
  if ($node->type == 'fieldtrip') {
    $sql = "SELECT n.nid FROM {node} n LEFT JOIN {content_type_ftritem} ftr ON n.nid=ftr.nid WHERE ftr.field_ftritem_field_trip_nid = %d";
    $db_result = db_query(db_rewrite_sql($sql), $node->nid);
    $result = array();
    $op = 'update';
    module_load_include('inc', 'content_access', 'content_access.admin');
    while ($ftritemnid = db_fetch_object($db_result)) {
      $ftritem = node_load($ftritemnid->nid);
      $acl_id = content_access_get_acl_id($ftritem, $op);
      acl_add_user($acl_id, $user->uid);
      acl_node_add_acl($ftritem->nid, $acl_id, $op == 'view', $op == 'update', $op == 'delete', content_access_get_settings('priority', $node->type));
      node_access_acquire_grants($ftritem);
    }
    $acl_id = content_access_get_acl_id($node, $op);
    acl_add_user($acl_id, $user->uid);
    acl_node_add_acl($node->nid, $acl_id, $op == 'view', $op == 'update', $op == 'delete', content_access_get_settings('priority', $node->type));
    node_access_acquire_grants($node);
  }
}

function devtrack_module_fieldtrip_revoke_update($node, $user) {
  if ($node->type == 'fieldtrip') {
    $sql = "SELECT n.nid FROM {node} n LEFT JOIN {content_type_ftritem} ftr ON n.nid=ftr.nid WHERE ftr.field_ftritem_field_trip_nid = %d";
    $db_result = db_query(db_rewrite_sql($sql), $node->nid);
    module_load_include('inc', 'content_access', 'content_access.admin');
    $op = 'update';
    $result = array();
    while ($ftritemnid = db_fetch_object($db_result)) {
      $ftritem = node_load($ftritemnid->nid);
      $acl_id = content_access_get_acl_id($ftritem, $op);
      acl_remove_user($acl_id, $user->uid);
      acl_node_remove_acl($ftritem, $acl_id);
      node_access_acquire_grants($ftritem);
    }
    $acl_id = content_access_get_acl_id($node, $op);
    acl_remove_user($acl_id, $user->uid);
    acl_node_remove_acl($node, $acl_id);
    node_access_acquire_grants($node);
  }
}

function devtrack_module_fieldtrip_publish(&$node) {
  if ($node->type == 'fieldtrip') {
    $sql = "SELECT n.nid FROM {node} n LEFT JOIN {content_type_ftritem} ftr ON n.nid=ftr.nid WHERE ftr.field_ftritem_field_trip_nid = %d";
    $db_result = db_query(db_rewrite_sql($sql), $node->nid);
    while ($ftritemnid = db_fetch_object($db_result)) {
      $ftritem = node_load($ftritemnid->nid);
      $ftritem->field_ftritem_status[0]['value'] = 'Submitted';
      node_save($ftritem);
      node_access_acquire_grants($ftritem);
    }
    node_access_acquire_grants($node);
  }
}

function devtrack_module_node_grants($account, $op) {
  $grants['devtrac_rid'] = array_keys($account->roles);
  $grants['devtrac_author'] = array($account->uid);
  return $grants;
}

function devtrack_module_node_access_records($node) {
  if (!$node->nid) {
    return;
  }

  if (($node->type == 'fieldtrip') || ($node->type == 'ftritem')) {
    $grants = array();
    if ($node->type == 'ftritem') {
      $fieldtrip = node_load($node->field_ftritem_field_trip[0]['nid'], NULL, TRUE);
    }
    else {
      $fieldtrip = $node;
    }
    if ($fieldtrip->field_fieldtrip_status[0]['value'] != 'Approved') {
      //just deny access
      $grants[] = array(
        'realm' => 'devtrac_rid',
        'gid' => 1,
        'grant_view' => 0,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 26,
      );
      $grants[] = array(
        'realm' => 'devtrac_rid',
        'gid' => 5,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 26,
      );
      $grants[] = array(
        'realm' => 'devtrac_author',
        'gid' => $fieldtrip->field_fieldtrip_user[0]['uid'],
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 26,
      );
    }
    else {
    }
  }
  return $grants;
}

function devtrack_module_fieldtrip_publish_all_field_trips() {
  $sql = "SELECT nid FROM {node} WHERE type = '%s' OR type = '%s'";
  $result = db_query($sql, 'fieldtrip', 'ftritem');
  while ($node = db_fetch_object($result)) {
    $current_node = node_load($node->nid);
    $current_node->status = 1;
    if ($current_node->type == 'fieldtrip') {
      $current_node->field_fieldtrip_status[0]['value'] = 'Approved';
    }
    else { // node type is ftritem
      $current_node->field_ftritem_date_visited[0]['value'] = date('Y-m-j', $current_node->created);
    }
    node_save($current_node);
  }
}

/*
 * Gather information about the status of a fieldtrip
 * including all site reports and their action items
 */
function devtrac_module_get_fieldtrip_status($node) {
  $output = '<div class="title">Fieldtrip Status</div><div class ="caption">Fieldtrip</div>';
  $output .= '<ul>'. l($node->title, 'node/'. $node->nid .'/edit', array('html' => TRUE));
  $fieldtripstatus = TRUE;
  // Gather information on the Field Trip
  if (!isset($node->field_fieldtrip_narrative[0]['value']) || empty($node->field_fieldtrip_narrative[0]['value'])) {
    $fieldtripstatus = FALSE;
    $output .= '<li>'. l('Provide the Narrative', $node->nid .'/edit', array('fragment' => 'edit-field-fieldtrip-narrative-0-value-wrapper', 'external' => TRUE, 'html' => TRUE)) .'</li>';
  }
  else {
    $output .= '<li>Clear</li>';// All fields are okay, but you might want to read through the Summary and the Full Report.</li>';
  }
  $output .= '</ul>';

  // Gather information on all Site Reports (Action Items inclusive)
  $sql = "SELECT nid FROM {content_type_ftritem} WHERE field_ftritem_field_trip_nid = %d ORDER BY field_ftritem_date_visited_value DESC";
  $nids = db_query($sql, $node->nid);
  $output .= '<div class="caption">Site Reports</div>';
  $sitereportsstatus = TRUE;
  while ($nid = db_fetch_object($nids)) {
//    $sitereportstatus = TRUE;
    $result = devtrac_module_get_site_report_status(node_load($nid->nid));
    $output .= $result['output'];
    $sitereportsstatus = $sitereportsstatus && $result['status'];
  }

  // Conditionally add a submit text and button to the output
  if ($fieldtripstatus && $sitereportsstatus) {
    $output .= '<div>All fields on the Field Trip and all of its Site Reports are ready to be submitted.</div>';
    $output .= _devtrack_module_getbutton('Submit Field Trip', 'node/'. $node->nid .'/setstatus/approve');
  }
  return $output;
}

/*
 * Gather information about the status of a site report
 * including all its action items
 */
function devtrac_module_get_site_report_status($node) {
  // Gather information on all Site Reports (Action Items inclusive)
  $result = array(
    'status' => TRUE,
    'output' => ''
  );
  $result['output'] .= '<ul>'. l($node->title, 'node/'. $node->nid .'/edit', array('query' => array('destination' => 'node/'. $node->field_ftritem_field_trip[0]['nid']), 'html' => TRUE));
  switch ($node->field_ftritem_status[0]['value']) {
    case 'Submitted':
//      break;
    case 'Submittable':
//      break;
    case 'In Progress':
    default:
      if (!isset($node->field_ftritem_public_summary[0]['value']) || empty($node->field_ftritem_public_summary[0]['value']) ||
          ($node->field_ftritem_public_summary[0]['value'] == t('Please Provide a small summary for the public.'))) {
        $result['status'] = FALSE;
        $result['output'] .= '<li>'. l('Provide the Public Summary', $node->nid .'/edit', array('fragment' => 'edit-field-ftritem-public-summary-0-value-wrapper', 'external' => TRUE, 'query' => array('destination' => 'node/'. $node->field_ftritem_field_trip[0]['nid']), 'html' => TRUE)) .'</li>';
      }
      if (!isset($node->field_ftritem_narrative[0]['value']) || empty($node->field_ftritem_narrative[0]['value']) ||
          ($node->field_ftritem_narrative[0]['value'] == t('Please provide a full report.'))) {
        $result['status'] = FALSE;
        $result['output'] .= '<li>'. l('Provide the Narrative', $node->nid .'/edit', array('fragment' => 'edit-field-ftritem-narrative-0-value-wrapper', 'external' => TRUE, 'query' => array('destination' => 'node/'. $node->field_ftritem_field_trip[0]['nid']), 'html' => TRUE)) .'</li>';
      }
      $vocabularysc = devtrack_module_get_vocabulary_by_name(t('OECD Sector Code'));
      $sector_codes = array_values(taxonomy_node_get_terms_by_vocabulary($node, $vocabularysc->vid));
      if (!isset($sector_codes) || empty($sector_codes)) {
        $result['status'] = FALSE;
        $result['output'] .= '<li>'. l('Provide the OECD Sector Code', $node->nid .'/edit', array('fragment' => 'edit-taxonomy-9-wrapper', 'external' => TRUE, 'query' => array('destination' => 'node/'. $node->field_ftritem_field_trip[0]['nid']), 'html' => TRUE)) .'</li>';
      }
      if (!isset($node->field_ftritem_date_visited[0]['value']) || is_null($node->field_ftritem_date_visited[0]['value'])) {
        $result['status'] = FALSE;
        $result['output'] .= '<li>'. l('Provide the Date Visited', $node->nid .'/edit', array('fragment' => 'edit-field-ftritem-date-visited-0-value-wrapper', 'external' => TRUE, 'query' => array('destination' => 'node/'. $node->field_ftritem_field_trip[0]['nid']), 'html' => TRUE)) .'</li>';
      }
      $vocabularysrt = devtrack_module_get_vocabulary_by_name(t('Site Report Type'));
      $report_types = array_values(taxonomy_node_get_terms_by_vocabulary($node, $vocabularysrt->vid));
      if (($report_types[0]->name == 'Site Visit') AND ($node->field_ftritem_place[0]['nid'] == NULL)) {
        $result['status'] = FALSE;
        $result['output'] .= '<li>'. l('Provide the Place', $node->nid .'/edit', array('fragment' => 'edit-field-ftritem-place-wrapper', 'external' => TRUE, 'query' => array('destination' => 'node/'. $node->field_ftritem_field_trip[0]['nid']), 'html' => TRUE)) .'</li>';
      }
      if (($report_types[0]->name == 'Roadside Observation') && ($node->field_ftritem_lat_long[0]['openlayers_wkt'] == NULL)) {
        $result['status'] = FALSE;
        $result['output'] .= '<li>'. l('Provide the Lat-Long', $node->nid .'/edit', array('fragment' => 'edit-field-ftritem-lat-long-openlayers-wkt-wrapper', 'external' => TRUE, 'query' => array('destination' => 'node/'. $node->field_ftritem_field_trip[0]['nid']), 'html' => TRUE)) .'</li>';
      }
      if (($report_types[0]->name == 'Human Interest Story') AND ($node->field_ftritem_place[0]['nid'] == NULL) AND ($node->field_ftritem_lat_long[0]['openlayers_wkt'] == NULL)) {
        $result['status'] = FALSE;
        $result['output'] .= '<li>'. l('Provide either the Place or the Lat-Long', $node->nid .'/edit', array('fragment' => 'edit-field-ftritem-lat-long-openlayers-wkt-wrapper', 'external' => TRUE, 'query' => array('destination' => 'node/'. $node->field_ftritem_field_trip[0]['nid']), 'html' => TRUE)) .'</li>';
      }
      if ($result['status']) {
        $result['output'] .= '<li>Clear</li>';// All fields are okay, but you might want to read through the Summary and the Full Report.</li>';
      }
      // Gather information on all Action Items for a Site Report
      // First get all the Site Reports that belong to this Field Trip
      $sql = "SELECT nid FROM {content_type_actionitem} WHERE field_actionitem_ftreportitem_nid = %d ORDER BY field_actionitem_due_date_value DESC";
      $nids = db_query($sql, $node->nid);
      $actionitemsstatus = TRUE;
      if ($nids->num_rows > 0) {
        $result['output'] .= '<li><div class="caption">Action Items</div>';
        while ($nid = db_fetch_object($nids)) {
          $airesult = devtrac_module_get_action_item_status(node_load($nid->nid));
          $result['output'] .= $airesult['output'];
          $actionitemsstatus = $actionitemsstatus && $airesult['status'];
        }
      }
      break;
  }
  $result['status'] = $result['status'] && $actionitemsstatus;
  $result['output'] .= '</ul>';
  return $result;
}

/*
 * Gather information about the status of an action item
 */
function devtrac_module_get_action_item_status($node) {
  // Gather information on all Action Items
  $result = array(
    'status' => TRUE,
    'output' => ''
  );
  $result['output'] .= '<ul>'. l($node->title, 'node/'. $node->nid .'/edit', array('query' => array('destination' => 'node/'. arg(1)), 'html' => TRUE));
  if (!isset($node->field_actionitem_resp_place[0]['nid']) || is_null($node->field_actionitem_resp_place[0]['nid'])) {
    $result['status'] = FALSE;
    $result['output'] .= '<li>'. l('Provide the Location', $node->nid .'/edit', array('fragment' => 'edit-field-actionitem-resp-place-0-nid-wrapper', 'external' => TRUE, 'query' => array('destination' => 'node/'. arg(1)), 'html' => TRUE)) .'</li>';
  }
  $sector_codes = devtrack_module_get_vocabulary_by_name(t('OECD Sector Code'));
  $terms = array_values(taxonomy_node_get_terms_by_vocabulary($node, $sector_codes->vid));
  if (!isset($terms) || empty($terms)) {
    $result['status'] = FALSE;;
    $result['output'] .= '<li>'. l('Provide the OECD Sector Code', $node->nid .'/edit', array('fragment' => 'edit-taxonomy-9-wrapper', 'external' => TRUE, 'query' => array('destination' => 'node/'. arg(1)), 'html' => TRUE)) .'</li>';
  }
  if ($result['status']) {
    $result['output'] .= '<li>Clear</li>';// All fields are okay, but you might want to read through the Follow-up Task.</li>';
  }
  $result['output'] .= '</ul>';
  return $result;
}

function devtrack_module_get_report_counts() {
//  $output = '<div class="block with-block-editing">';
//  $output .= '<h3>Site Reports</h3>';
//  $output .= '<div class="content">';
  $output .= '<div class="view-field-trip-report-items">';
  $output .= '<div class="view-content">';
  $output .= '<table class="views-table">';
  $output .= '<thead><tr><td></td></tr></thead>';
  $output .= '<tbody>';

  $vocabulary = devtrack_module_get_vocabulary_by_name('Place Type');
  $sql_count = "SELECT COUNT(nid) FROM {term_node} WHERE tid = %d";
  $sql_children = "SELECT tid FROM {term_hierarchy} WHERE parent = %d";

  $result = devtrack_module_get_term_by_name_vid('Health Facilities', $vocabulary->vid);
  $count = db_result(db_query($sql_count, $result[0]->tid));
  $children = db_query($sql_children, $result[0]->tid);
  while ($child = db_fetch_object($children)) {
    $count += db_result(db_query($sql_count, $child->tid));
  }
  $output .= '<tr class="odd views-row-first">';
  $output .= '<td class="views-field-nid">'. $count .'</td>';
  $output .= '<td class="views-field-name">';
  $output .= '<a href="/tripreports/map?placetype='. $result[0]->tid .'">'. $result[0]->name .'</a>';
  $output .= '</td></tr>';

  $result = devtrack_module_get_term_by_name_vid('Schools', $vocabulary->vid);
  $count = db_result(db_query($sql_count, $result[0]->tid));
  $children = db_query($sql_children, $result[0]->tid);
  while ($child = db_fetch_object($children)) {
    $count += db_result(db_query($sql_count, $child->tid));
  }
  $output .= '<tr class="even">';
  $output .= '<td class="views-field-nid">'. $count .'</td>';
  $output .= '<td class="views-field-name">';
  $output .= '<a href="/tripreports/map?placetype='. $result[0]->tid .'">'. $result[0]->name .'</a>';
  $output .= '</td></tr>';

  $result = devtrack_module_get_term_by_name_vid('Water Points', $vocabulary->vid);
  $count = db_result(db_query($sql_count, $result[0]->tid));
  $children = db_query($sql_children, $result[0]->tid);
  while ($child = db_fetch_object($children)) {
    $count += db_result(db_query($sql_count, $child->tid));
  }
  $output .= '<tr class="odd views-row-last">';
  $output .= '<td class="views-field-nid">'. $count .'</td>';
  $output .= '<td class="views-field-name">';
  $output .= '<a href="/tripreports/map?placetype='. $result[0]->tid .'">'. $result[0]->name .'</a>';
  $output .= '</td></tr>';

  $output .= '</tbody></table></div></div>';
//  $output .= '</div></div></div>';

  return $output;
}

function devtrack_module_link_alter(&$links, $node, $comment = NULL) {
  // Remove all comment links except the hidden_comment ones
  if ($comment != NULL) {
    $links = array_intersect_key($links, array('hidden_comment_show' => TRUE, 'hidden_comment_hide' => TRUE));
  }
}

/*
function devtrack_module_popups () {
  return array(
    'fieldtrip_node_form' => array( // The field trip node edit form
      '#edit-delete' => array(
        'href' => 'node/'. arg(1) . '/delete',
      ),
    ),
    'ftritem_node_form' => array( // The report item node edit form
      '#edit-delete' => array(
        'href' => 'node/'. arg(1) . '/delete',
      ),
    ),
  );
}
 */
