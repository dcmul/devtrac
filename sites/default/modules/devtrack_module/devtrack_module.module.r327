<?php

/**
 * Implementation of hook_ctools_plugin_api().
 */
//function devtrack_module_ctools_plugin_api($module, $api) {
//}

/* 
  if (_devtrack_module_isinternetexplorer()) {
    $output .= l('<div class="form-submit">Click to submit</div>', "user/". $applicant->uid ."/submit/confirm", Array('html'=> TRUE));
  }
  else {
    $output .= l('<button class="form-submit" type="button">Click to submit</button>', "user/". $applicant->uid ."/submit/confirm", Array('html'=> TRUE));
  }

 */

function devtrack_module_init() {
  if (devtrack_module_ismobile()) {
    admin_menu_suppress(); // Suppress the admin menu on the mobile website.
  }
}

function devtrack_module_ismobile() {
  global $base_url;
  $mobile_url = variable_get('mobile_tools_mobile_url', 'http://m.devtrac.jan');
  return (trim($mobile_url) == trim($base_url));
}

function devtrack_module_menu() {
  $items['devtrac/addplacetofieldtrip/%'] = array(
    'title' => 'Add Place to Fieldtrip',
    'page callback' => 'devtrack_module_addplacefieldtotrip',
    'page arguments' => array(2),
    'access callback' => TRUE, //'node_access',
//    'access arguments' => array('update', 3), // this is not working correctly. 
    'type' => MENU_CALLBACK,
  );
  $items['devtrac/mycurrentfieldtrip'] = array(
    'title' => 'My Current Fieldtrip',
    'page callback' => 'devtrack_module_gotofieldtrip',
    'access callback' => 'devtrack_module_currentfieldtrip_access',
  );
  $items['homepage'] = array(
    'title' => 'Homepage',
    'page callback' => 'devtrack_module_homepage',
    'access callback' => TRUE,
  );
  $items['devtrac/getfeatureinfo'] = array(
    'page callback' => 'devtrack_module_createplace',
    'type' => MENU_CALLBACK,
    'access arguments' => array('create place content'),
  );
  $items['node/%node/addplaceform'] = array(
    'title' => 'Add Place to Trip',
    'page callback' => 'devtrack_module_pageaddplaceform',
    'page arguments' => array(1),
    'access callback' => 'devtrack_module_pageaddplaceform_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  //    'type' => MENU_NORMAL_ITEM,
  );
  $items['node/%node/addcomment'] = array(
    'title' => 'Add Comment',
    'page callback' => 'devtrack_module_gotocommentform',
    'page arguments' => array(1),
    'access callback' => 'devtrack_module_gotocommentform_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['m_action_item/%node/add_comment'] = array(
    'title' => 'Add Comment',
    'page callback' => 'devtrack_module_actionitemcommentform',
    'page arguments' => array(1),
    'access callback' => 'devtrack_module_actionitemcommentform_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['m_report_item/%node/add_picture'] = array(
    'title' => 'Add Picture',
    'page callback' => 'devtrack_module_reportitemaddpicture',
    'page arguments' => array(1),
    'access callback' => 'devtrack_module_reportitemaddpicture_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['m_report_item/%node/add_action_item'] = array(
    'title' => 'Add Action',
    'page callback' => 'devtrack_module_reportitemaddactionitem',
    'page arguments' => array(1),
    'access callback' => 'devtrack_module_reportitemaddactionitem_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  return $items;
}


function devtrack_module_gotocommentform_access($actionitem = NULL) {
  
  $result = ($fieldtrip->type == "actionitem");
  if (!$result) { return false;};
  $result = $result && ($actionitem->comment == 2) &&  (user_access("post comments") || user_access("post comments without approval"));
  return TRUE; 
}

function devtrack_module_gotocommentform($actionitem = NULL) {
  drupal_goto('node/'. $actionitem->nid, NULL ,'comment-form');
}


function devtrack_module_actionitemcommentform_access($actionitem = NULL) {
  $result = ($actionitem->type == "actionitem");
  if (!$result) {
    return false;
  }
  $result = $result && ($actionitem->comment == 2) &&  (user_access("post comments") || user_access("post comments without approval"));
  return TRUE; 
}

function devtrack_module_actionitemcommentform($actionitem = NULL) {
  return drupal_get_form('comment_form', array('nid' => $actionitem->nid), $actionitem->title);
}

function devtrack_module_reportitemaddpicture_access($reportitem = NULL) {
  $result = ($reportitem->type == "ftritem");
  if (!$result) {
    return false;
  }
  $result = $result && (user_access("edit own ftritem content"));
  return TRUE; 
}

function devtrack_module_reportitemaddpicture($reportitem = NULL) {
  drupal_goto('node/'. $reportitem->nid .'/edit/field_ftritem_images');
}

function devtrack_module_reportitemaddactionitem_access($reportitem = NULL) {
  $result = ($reportitem->type == "ftritem");
  if (!$result) {
    return false;
  }
  $result = $result && (user_access("create actionitem content"));
  return TRUE; 
}

function devtrack_module_reportitemaddactionitem($reportitem = NULL) {
  global $user;
  $actionitem = new stdClass();
  $actionitem->type = 'actionitem';
  $actionitem->title = t('Click "Edit Title" below to change the title');
  $actionitem->field_actionitem_followuptask[0]['value'] = t('Replace this with an appropriate description.');
  $actionitem->field_actionitem_responsible[0]['uid'] = $user->uid;
  $actionitem->field_actionitem_due_date[0]['value'] = date('Y-m-dT00:00:00');
  $actionitem->field_actionitem_status[0]['value'] = 1;
  if ($reportitem->field_ftritem_place[0]['nid'] > 0 ) {
    $actionitem->field_actionitem_resp_place[0]['nid'] = $reportitem->field_ftritem_place[0]['nid'];
  }
  $actionitem->field_actionitem_severity[0]['value'] = 2;
  $actionitem->field_actionitem_ftreportitem[0]['nid'] = $reportitem->nid;
  $actionitem->comment = 2;
  $actionitem->uid = $user->uid;
  node_save($actionitem);
  drupal_goto('m_action_item/'. $actionitem->nid);
}

/*
 * Determine the homepage
 */
function devtrack_module_homepage() {
  global $user;

  if (devtrack_module_ismobile()) { // We're on the mobile website.
    if ($user->uid == 0) { // The user is "Anonymous".
      $query = array('destination' => 'homepage');
      drupal_goto('user', $query);
    }
  	if (in_array('unicef user (Mobile)', $user->roles)) { // We're dealing with a mobile user.
      if ($mytrip = devtrack_module_getcurrentfieldtrip()) { // This user has a field trip scheduled for today.
      	drupal_goto('m_field_trip/'. $mytrip);
      }
      else { // The user does not have a field trip scheduled for today.
      	return 'You do not have a fieldtrip scheduled for today. You have to go to the main website to create a new or reschedule an existing fieldtrip.';
      }
    }
    else { // We're dealing with a non-mobile user.
      return 'You do not have a mobile account on this website. Please contact the site administrator to get one.';
    }
  }
  else { // We're on the main website.
    $view = views_get_view('field_trip_report_items');
    return $view->preview('page_1', array('all'));  }
}

/*
 * Navigates user to his current fieldtrip, if he has one
 */
function devtrack_module_gotofieldtrip() {
  global $user;

  $mytrip = devtrack_module_getcurrentfieldtrip();
  if (devtrack_module_ismobile()) { // We're on the mobile website.
   	drupal_goto('m_field_trip/'. $mytrip);
  }
  else {
    drupal_goto('node/'. $mytrip);
  }
}

/*
 *   Adds a place to a fieldtrip, not ajax-proof, just a URL
 */ 

function devtrack_module_addplacefieldtotrip($placenid, $fieldtripnid = NULL) {
  $message = _devtrack_module_addplacefieldtotrip_helper($placenid, $fieldtripnid);
	$object = new stdClass();
  $object->content = $message;// $html.drupal_render($node->content[$field_name]);
  drupal_json($object);
  exit();
}

function _devtrack_module_addplacefieldtotrip_helper($placenid, $fieldtripnid = NULL) {
  global $user;
  $message = "";  
  $place = node_load($placenid);
  if ($place->type != 'place') {
    $message .= "Sorry, that is not a Place that you are attaching to the Field Trip.";
  } else {
    if (isset($fieldtripnid) && is_numeric($fieldtripnid)) {
      $fieldtrip = node_load($fieldtripnid);
      if ($fieldtrip->type != 'fieldtrip') {
        $message .= "Sorry, that is not a Field Trip that you are attaching this place to.";
      } else {
        foreach($fieldtrip->field_fieldtrip_places as $tpplace) {
          if ($tpplace['nid'] == $placenid) {
            
            $sql = "SELECT ftr.nid FROM content_type_ftritem ftr WHERE ftr.field_ftritem_field_trip_nid = %d AND ftr.field_ftritem_place_nid = %d";
            $ftrnid = db_result(db_query($sql, $fieldtripnid, $placenid));
            watchdog("reinier", "ftrnid " . $ftrnid);
            if ($ftrnid > 0) {
              $message .= "This place is already attached to the field trip " . $fieldtrip->title;
            } 
            break;
          }
        }
        if ($message == "") {
          $fieldtrip->field_fieldtrip_places[$placenid]['nid'] = $placenid;
          node_save($fieldtrip);
          $placetype = '';
          if (count($place->taxonomy) > 0) {
            foreach ($place->taxonomy as $term) {
              if ($term->vid == 1) { // place type vocabulary
                $placetype = ' '. $term->name;
              }
            }
          }
          $ftr = new stdClass();
          $ftr->type = 'ftritem';
          $ftr->title = 'Trip Report at '. $place->title . $placetype;
          $ftr->field_ftritem_field_trip[0]['nid'] = $fieldtrip->nid;
          $ftr->field_ftritem_place[0]['nid'] = $placenid;
          $ftr->field_ftritem_public_summary[0]['value'] = t('Please Provide a small summary for the public.');
          $ftr->field_ftritem_narrative[0]['value'] = t('Please provide a full report.'); 
          $ftr->uid = $user->uid;
          node_save($ftr);
          
          // for when we go ajax messages:  $message .= "Attached the " .$place->title . ' to '. l($fieldtrip->title, 'node/'. $fieldtrip->nid);
          $message .= "Attached the " .$place->title . ' to '. $fieldtrip->title;
        }
      }
    }
  }
  return $message;
}

function devtrack_module_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'comment_form':
      if ((arg(0) == 'm_action_item') && (is_numeric(arg(1))) && (arg(2) == 'add_comment')) {
        $form['#redirect'] = 'm_action_item/'. arg(1) . '/comments';
        $form['#action'] = '';
        $form['preview'] = NULL;
      }
      break;
    case 'fieldtrip_node_form':
    case 'ftritem_node_form':
    case 'place_node_form':
      // Set default district on create location page.
      $destination = drupal_get_destination();
      if ((arg(0) == "node") && (arg(1) == "add") && (arg(2) == "place") && (trim($destination) != "")) {
        $args = explode("%2F", $destination);
        $district = $args[1];
        $form['taxonomy'][6]['#default_value'] = $district;
      }
    case 'actionitem_node_form':
  	  $arg3 = arg(3);
      if ((arg(0) == 'node') && (is_numeric(arg(1))) && (arg(2) == 'edit')) {
        if (empty($arg3)) {
          break;
        }
        switch ($form_id) {
          case 'fieldtrip_node_form':
            $form['#redirect'] = 'm_field_trip/'. arg(1);
            break;
          case 'ftritem_node_form':
            $form['#redirect'] = 'm_report_item/'. arg(1);
            break;
          case 'place_node_form':
            $form['#redirect'] = 'm_place/'. arg(1);
            break;
          case 'actionitem_node_form':
            $form['#redirect'] = 'm_action_item/'. arg(1);
            break;
          default:
        }
        foreach ($form as $field_name => $field_value) {
          if (strstr($field_name, 'field_') == $field_name) {
            if ($field_name == arg(3)) {
              drupal_set_title(t('Edit '. $field_value['#title']));
            }
            else {
              $form[$field_name] = NULL;
            }
          }
        }
        if (($form_id != 'actionitem_node_form') || ($arg3 != 'title') || (t($form['#node']->title) != t('Click "Edit Title" below to change the title'))) {
          $form['title'] = NULL;
        }
        $form['taxonomy'] = NULL;
      }
      break;
  }
}

function devtrack_module_form_ftritem_node_form_alter(&$form, &$form_state) {
  $form['#pre_render'][] = 'devtrack_module_ftritem_hide_place_and_fieldtrip_fields';
}

function devtrack_module_ftritem_hide_place_and_fieldtrip_fields(&$form) {
  // Change the text on the more button under the images field.
  $form['field_ftritem_images']['field_ftritem_images_add_more']['#value'] = 'Add another photo';
  global $user;
  if (in_array('administrator', array_values($user->roles))) {
    return $form;
  }
  	
  if (isset($form[field_ftritem_place][0]['nid']['nid']['#value'])) {
  	$form[field_ftritem_place]['#prefix'] = '<div class="devtrachidefield">';
    $form[field_ftritem_lat_long]['#prefix'] = '<div class="devtrachidefield">';
  }
  else {
  	$form[field_ftritem_place]['#prefix'] = '<div class="devtracshowfield">';
    $form[field_ftritem_lat_long]['#prefix'] = '<div class="devtracshowfield">';
  }
  $form[field_ftritem_place]['#suffix'] = '</div>';

  if (isset($form[field_ftritem_field_trip][0]['nid']['nid']['#value'])) {
  	$form[field_ftritem_field_trip]['#prefix'] = '<div class="devtrachidefield">';
  }
  else {
  	$form[field_ftritem_field_trip]['#prefix'] = '<div class="devtracshowfield">';
  }
  $form[field_ftritem_field_trip]['#suffix'] = '</div>';
  return $form;
}

function devtrack_module_form_fieldtrip_node_form_alter(&$form, &$form_state) {
  $form['#pre_render'][] = 'devtrack_module_fieldtrip_hide_user_field';
}

function devtrack_module_fieldtrip_hide_user_field(&$form) {
  // Change the text on the more button under the places field.
  $form['field_fieldtrip_places']['field_fieldtrip_places_add_more']['#value'] = 'Add another place';
  global $user;
  if (in_array('administrator', array_values($user->roles))) {
    return $form;
  } 
	
  if (isset($form[field_fieldtrip_user][0]['#value']['uid'])) {
  	$form[field_fieldtrip_user]['#prefix'] = '<div class="devtrachidefield">';
  }
  else {
  	$form[field_fieldtrip_user]['#prefix'] = '<div class="devtracshowfield">';
  }
  $form[field_fieldtrip_user]['#suffix'] = '</div>';
  
  $form[field_fieldtrip_places]['#prefix'] = '<div class="devtrachidefield">';
  $form[field_fieldtrip_places]['#suffix'] = '</div>';
  
  
  
  return $form;
}

function devtrack_module_form_actionitem_node_form_alter(&$form, &$form_state) {
  $form['#pre_render'][] = 'devtrack_module_actionitem_hide_place_and_ftritem_fields';
}

function devtrack_module_actionitem_hide_place_and_ftritem_fields(&$form) {
  // Change the text on the more button under the responsible persons field.
  $form['field_actionitem_responsible']['field_actionitem_responsible_add_more']['#value'] = 'Add another person';
  global $user;
  if (in_array('administrator', array_values($user->roles))) {
    return $form;
  } 
	
  if (isset($form[field_actionitem_resp_place][0]['nid']['nid']['#value'])) {
  	$form[field_actionitem_resp_place]['#prefix'] = '<div class="devtrachidefield">';
  }
  else {
  	$form[field_actionitem_resp_place]['#prefix'] = '<div class="devtracshowfield">';
  }
  $form[field_actionitem_resp_place]['#suffix'] = '</div>';
  
  if (isset($form[field_actionitem_ftreportitem][0]['nid']['nid']['#value'])) {
  	$form[field_actionitem_ftreportitem]['#prefix'] = '<div class="devtrachidefield">';
  }
  else {
  	$form[field_actionitem_ftreportitem]['#prefix'] = '<div class="devtracshowfield">';
  }
  $form[field_actionitem_ftreportitem]['#suffix'] = '</div>';
  return $form;
}

function devtrack_module_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;
  global $base_path;
  global $base_url;
  switch ($op) {
    case 'list' :
      $blocks[0]['info'] = t('Devtrac Create Links');
      $blocks[1]['info'] = t('Devtrac Legend');
      $blocks[2]['info'] = t('Upload Picture Reminder');
      return $blocks;
      break;
    case 'view' :
      $block = array();
      switch ($delta) {
        case 0:
          if ((user_is_logged_in()) && (arg(0) == 'node') && (is_numeric(arg(1)))) {
            $localnode = node_load(arg(1));
            $localusername = $localnode->name;
            $localuser = user_load($localnode->uid);
            if (user_access('create actionitem content')) {
                if( $localusername == $user->name ) {

                   /* Nice, action items on places, but not supported 
                   if ( $localnode->type == 'place') {
                    $options = Array(
                      'edit[field_actionitem_resp_place][nid][value]'  => $localnode->nid,
                      'edit[field_actionitem_responsible][uid][value]' => $localuseruid,
                      'html'  => TRUE,
                    );
                    // no, not without a report item!     
                    // $result .= '<li>'. l('<button type="button">Add Action Item</button>', 'node/add/actionitem', Array('query'=> $options, 'html'  => TRUE)) .'</li>';
                  }
                  */
                  if ( $localnode->type == 'ftritem') {
                    $options = Array(
                      'edit[field_actionitem_ftreportitem][0][nid][nid]'  => '[nid:'. $localnode->nid . ']',
                      'edit[field_actionitem_responsible][0][uid][uid]' => $localuser->name,
                    );
                    if ($localnode->field_ftritem_place[0][nid] > 0 ) {
                      $options['edit[field_actionitem_resp_place][0][nid][nid]']  = '[nid:'. $localnode->field_ftritem_place[0][nid] . ']';
                    }
                    
                      if (_devtrack_module_isinternetexplorer()) {
                        $result .= '<li>' . l('<div class="form-submit">Add Action Item</div>', 'node/add/actionitem', Array('query'=> $options, 'html'=> TRUE)) . '</li>';
                      }
                      else {
                        $result .= '<li>' . l('<button type="button">Add Action Item</button>', 'node/add/actionitem', Array('query'=> $options, 'html'  => TRUE)) . '</li>';
                      }
                  }
                }
            }


            // this is not spitting anything out at the moment
            /*
            if ($localnode->type == "place") {
            	if (!(devtrack_module_getcurrentfieldtrip() > 0)) {
            		// Let's just not show this.
//            		$result .= '<li>'. "You can not add this place to your Field Trip, because you have none.". '</li>';
              } else {
                if (user_access('create fieldtrip content', $localuser)) {
                  $options = Array(
                    'edit[field_fieldtrip_user][0][uid][uid]'  => $localuser,
//                    'html'  => TRUE,
                  );
                  // TODO: remove button when place is already in list of places. (And show some nice: 'You are about to visit this place' link to the FT
                  // this needs ajax, so disabled for now
                  // TODO: include wmsgetfeatureinfo.js file and make sure this gets fired on pageload.
                  //    $('.getfeatureaddlink').bind("click",Drupal.openlayers.openlayers_behavior_wmsgetfeatureinfo.click);
                  
                  $attribs = Array(            
                    'class' => 'getfeatureaddlink'
                    );
                  
                  $result .= '<li>'. l('<button type="button">Add this place to your Current Field Trip</button>', 'devtrac/addplacetofieldtrip/'.$localnode->nid .'/'. devtrack_module_getcurrentfieldtrip(), Array('query'=> $options, 'attributes' => $attribs, 'html'  => TRUE)) .'</li>';
                }
              }
            }
            
            */
            
            
          } elseif ((user_is_logged_in()) && (arg(0) == 'user') && (is_numeric(arg(1) | arg(1) == 'me'))) {
            if (is_numeric(arg(1))) {
              $localuser = user_load(arg(1));
              $localuseruid = arg(1);
            } else {
              $localuser = $user;
              $localuseruid = $user->uid;
              $localusername = $user->name;
            }
            if (user_access('create fieldtrip content', $localuser)) {
              $options = Array(
                'edit[field_fieldtrip_user][0][uid][uid]'  => $localuser->name,
                'html'  => TRUE,
              );
              if (_devtrack_module_isinternetexplorer()) {
                $result .= '<li>'. l('<div class="form-submit">Create Field Trip</div>', 'node/add/fieldtrip', Array('query'=> $options, 'html'=> TRUE)) . '</li>';
              }
              else {
                $result .= '<li>'. l('<button type="button">Create Field Trip</button>', 'node/add/fieldtrip', Array('query'=> $options, 'html'  => TRUE)). '</li>';
              }
            }
          }
          if ($result) {
            $result  = "<ul>". $result . "</ul>";
          }
          $block['title'] = "Devtrac Buttons";
          $block['content'] = $result;
          return $block;
        break;
        case 1:
          $block['subject'] = "";
          $block['content'] = '<img src="'. $base_url . '/sites/default/themes/devtrack_theme/images/legend.gif" alt="Map Legend"/>' ;
          return $block;
        break;
        case 2:
        	if ((user_is_logged_in()) && (!($user->picture != "")) && (arg(1) === $user->uid)) {
            $block['subject'] = "";
            $block['content'] .= "Don't forget to Upload your " . l('Picture', '/user/'. $user->uid ."/edit", array('fragment' => 'edit-pass-pass2', 'external' => TRUE));
            return $block;
        	} 
          break;
        
      
      }
    break;
  }
}      

function devtrack_module_currentfieldtrip_access() {
	$result = devtrack_module_getcurrentfieldtrip() > 0;
  return ($result);
}

function devtrack_module_getcurrentfieldtrip($account = NULL) {
	global $user;
	if (!isset($account)) {
		$account = $user;
	}
	$thedate = date('Y-m-d');
	
	/*$sql = "SELECT node.nid AS nid
 FROM {node} node 
 LEFT JOIN {content_type_fieldtrip} {node_data_field_fieldtrip_start_end_date} ON node.vid = node_data_field_fieldtrip_start_end_date.vid
 WHERE ((node.type in ('fieldtrip')) AND (node_data_field_fieldtrip_start_end_date.field_fieldtrip_user_uid = ". $account->uid ."))
    AND (
     (DATE_FORMAT(STR_TO_DATE(node_data_field_fieldtrip_start_end_date.field_fieldtrip_start_end_date_value, '%Y-%m-%%dT%T'), '%Y-%m-%%d') <= '". $thedate ."')
     OR
     (DATE_FORMAT(STR_TO_DATE(node_data_field_fieldtrip_start_end_date.field_fieldtrip_start_end_date_value2, '%Y-%m-%%dT%T'), '%Y-%m-%%d') >= '". $thedate ."')
 )";*/

	
	$sql = "SELECT node.nid AS nid FROM node node LEFT JOIN content_type_fieldtrip fieldtrip ON node.vid = fieldtrip.vid WHERE (node.type = 'fieldtrip' AND fieldtrip.field_fieldtrip_user_uid = ". $account->uid .") AND ( (DATE_FORMAT(STR_TO_DATE(fieldtrip.field_fieldtrip_start_end_date_value, '%Y-%m-%%dT%T'), '%Y-%m-%%d') <= '". $thedate ."') AND (DATE_FORMAT(STR_TO_DATE(fieldtrip.field_fieldtrip_start_end_date_value2, '%Y-%m-%%dT%T'), '%Y-%m-%%d') >= '". $thedate ."') )";
	
  $fieldtripnid = db_result(db_query($sql));	
	
  return $fieldtripnid;
}


function devtrack_module_search_block_form($form) {
  $form['search_block_form_keys']['#value'] = 'Search...';
  $form['search_block_form_keys']['#attributes']['class'] = 'default-value';
  return drupal_render($form);
}


function devtrack_module_process_getfeatureinfo($layer, $geometry, $params, $args) {
	global $user; // this is needed to set the uid on the nodes we are abou to create.
	$message = '';
	$mytrip = $args[2];
	$fieldtrip = node_load($mytrip);
  if ($fieldtrip->type != 'fieldtrip') {
  	return ("This is not a fieldtrip that you are linking the place to.");
  	exit;
  }
	
  if ($mytrip > 0) {
     
    $placetype = $params['placetype'];
    unset($params['placetype']);
    $placetypeterm = devtrack_module_get_term_by_name_vid($placetype, 1);
    $fieldtrip = node_load($mytrip);
    
    $name = $params['name'];
    unset($params['name']);
    
    // first, let's check if this place already exists
	 	$uid = $params['id'];
    unset($params['id']);
	 	$uri = "http://www.devtrac.ug/places";
	 	$sql = "SELECT n.nid from {content_type_place} n WHERE n.field_place_unique_id_value = '%s' AND n.field_place_sourcelayer_value = '%s' AND n.field_place_sourceuri_value='%s'"; 
	 	$placenid = db_result(db_query(db_rewrite_sql($sql), $uid, $layer, $uri));
	 	if ($placenid>0) {
	 		$message .= "The place was already known\n";

      foreach($fieldtrip->field_fieldtrip_places as $place) {
        if ($place['nid'] == $placenid) {
          return "This place is already attached to the field trip " . $fieldtrip->title;
        }
      }
	 		// got that out of the way, let's move on
	 	
	 	} else {
	 	  // Going to Create Place
	 	  
	 		// First, let's make sure the placetype taxonomy term exists.
	 	  if (!isset($placetypeterm[0]->tid)) {
        $form['name'] = $placetype;
        $form['vid'] = 1;
        taxonomy_save_term($form);
        $message .= "Created new Placetype '". $placetype . "'";
        $placetypeterm = devtrack_module_get_term_by_name_vid($placetype, 1);
	 	  }
	 		
	 		
	 	  $district = ucfirst(strtolower($params['district']));
	 	  $districtterm = devtrack_module_get_term_by_name_vid($district, 6);
      $vid = 6;
      unset($params['district']);
	 	 
      $node = new stdClass();
      $node->title = $name;
      $node->type = 'place';
//      node_object_prepare($node); 
      $node->body = implode('\n', $params);
      $node->field_place_unique_id[0]['value'] = $uid;
      $node->field_place_sourcelayer[0]['value'] = $layer;
      $node->field_place_sourceuri[0]['value'] = $uri;
      $node->uid = $user->uid;
      $node->field_place_lat_long[0]['openlayers_wkt'] = "GEOMETRYCOLLECTION(". $geometry . ")";
      $node->taxonomy = array($districtterm[0]->tid, $placetypeterm[0]->tid);
//      $node = node_submit($node);
      node_save($node);
       
//      taxonomy_node_save($node, $districtterm);
//      taxonomy_node_save($node, $placetypeterm);
      $placenid = $node->nid;   
	 	}
	 	
	 	$fieldtrip->field_fieldtrip_places[$placenid]['nid'] = $placenid;
    node_save($fieldtrip);

    $ftr = new stdClass();
    $ftr->type = 'ftritem';
    $ftr->title = 'Trip Report to '. $name;
    $ftr->field_ftritem_field_trip[]['nid'] = $fieldtrip->nid;
    $ftr->field_ftritem_place[]['nid'] = $placenid;
    $ftr->field_ftritem_public_summary[]['value'] = t('Please Provide a small summary for the public.');
    $ftr->field_ftritem_narrative[]['value'] = t('Please provide a full report.'); 
    $ftr->uid = $user->uid;
    node_save($ftr);
    
    
	 	
     $message .= "You added this place to '" . $fieldtrip->title . "'";
     return $message;
	 } else {
	 	 $message .= 'You have to have selected a fieldtrip before selecting pages.';
	 	 return $message;
	 }
	 $message .= "oh that is not good";
	 return $message;
}

function devtrack_module_pageaddplaceform_access($fieldtrip = NULL) {
	
	$result = ($fieldtrip->type == "fieldtrip");
	$result = $result && node_access("update", $fieldtrip);
  return $result;	
}


function devtrack_module_pageaddplaceform($fieldtrip = NULL) {
	return drupal_get_form("devtrack_module_addplaceform", $fieldtrip);
}

function devtrack_module_addplaceform($form_state, $fieldtrip) {

	$form['title'] = array(
	  '#title' => "title",
	  '#value' => "Select Place to visit for: ". $fieldtrip->title,
	);
	
	$districts = array();
	foreach ($fieldtrip->taxonomy as $district) {
		$districts[$district->tid] = $district->name;
	}
		
  $form['district'] = array(
    '#title' => t('District'),
    '#type' => 'select',
    '#description' => "Select the district where you want to search for places.",
    '#options' => $districts,
  );

  $placetypes = array();
  $placetypes[0] = 'School';
  $placetypes[1] = 'Health Clinic';
  $placetypes[2] = 'Waterpoint';
  $placetypes[3] = 'Other Locations';
  $placetypes[4] = '<em>Create roadside observation<em>';
  $form['placetype'] = array(
    '#title' => t('Place Type'),
    '#type' => 'radios',
    '#description' => 'Select the place type of the place you are looking for.',
    '#options' => $placetypes,
    '#default_value' => 0,
  );
  
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $fieldtrip->nid,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
		
//  print($fieldtripnid);
	return $form;
	
}

function devtrack_module_addplaceform_validate($form, &$form_state) {

}

function devtrack_module_addplaceform_submit($form, &$form_state) {

  switch ($form_state['values']['placetype']) {
  	case 0:
      drupal_goto('places/'. $form_state['values']['district'] . '/'. $form_state['values']['nid'] , 'layers=B0TTTFFT');
  		break;
  	case 1:
      drupal_goto('places/'. $form_state['values']['district'] . '/'. $form_state['values']['nid'] , 'layers=B0TTFTFT');
  		break;
  	case 2:
      drupal_goto('places/'. $form_state['values']['district'] . '/'. $form_state['values']['nid'] , 'layers=B0TTFFTT');
  		break;
    case 3:
      drupal_goto('places/'. $form_state['values']['district'] . '/'. $form_state['values']['nid'] , 'layers=B0TTFFFT');
      break;
  	case 4:
  		drupal_goto('node/add/ftritem', 'edit[field_ftritem_field_trip][0][nid][nid]=[nid:'. $form_state['values']['nid']. ']');
  		break;
  }


}



/**
 * Try to map a string to an existing term by name and vocabulary id.
 *
 * Shamelessly copied from Feeds. Did not want to create a dependency
 *
 *
 * Provides a case-insensitive and trimmed mapping, to maximize the likelihood
 * of a successful match limited by a vocabulary id.
 *
 * @param $name
 *   Name of the term to search for.
 *
 * @param $vid
 *   The vocabulary's ID.
 *
 * @return
 *   An array of matching term objects.
 */
function devtrack_module_get_term_by_name_vid($name, $vid) {
  $db_result = db_query(db_rewrite_sql("SELECT t.tid, t.name FROM {term_data} t WHERE LOWER(t.name) = LOWER('%s') AND t.vid = %d", 't', 'tid'), trim($name), $vid);
  $result = array();
  while ($term = db_fetch_object($db_result)) {
    $result[] = $term;
  }
  return $result;
}




function devtrack_module_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'ftritem') {
    switch ($op) {
      case 'delete':
        $placenid = $node->field_ftritem_place[0]['nid'];
        $fieldtripnid = $node->field_ftritem_field_trip[0]['nid'];
        $fieldtrip = node_load($fieldtripnid);    
        if ($placenid > 0) {
          $sql = "DELETE from {content_field_fieldtrip_places} WHERE nid = %d AND field_fieldtrip_places_nid = %d";
          db_query($sql, $fieldtripnid, $placenid);
// re-adding inserts the trip report.
          $place = node_load($placenid);
          if (strlen($fieldtrip->title) > 0) {
            drupal_set_message('Removed ' . $place->title . ' from ' . $fieldtrip->title );
          }
        }
        $_REQUEST['destination'] = 'node/' . $fieldtripnid;
    	break;
    }
  }
  if (($node->type == 'fieldtrip') && ($op == 'delete')) {
    $sql = "SELECT n.nid FROM {node} n LEFT JOIN {content_type_ftritem} ftr ON n.nid=ftr.nid WHERE ftr.field_ftritem_field_trip_nid = %d";
    $db_result = db_query(db_rewrite_sql($sql), $node->nid);
    $result = array();
    while ($ftritemnid = db_fetch_object($db_result)) {
      $ftritem = node_load($ftritemnid->nid);
      node_delete($ftritemnid->nid);
    }
    $_REQUEST['destination'] = 'user/me';
  }
  if ($node->type == 'place') {
    switch ($op) {
      case 'insert':
        $placenid = $node->nid;
        $destination = drupal_get_destination();
        $fieldtripnid = substr($destination, strrpos($destination, '%2F') + 3);
        $message = _devtrack_module_addplacefieldtotrip_helper($placenid, $fieldtripnid);
        drupal_set_message($message);
        break;
    }
  }
}

/**
 * Implementation of hook_taxonomy_menu_path().
 */
function devtrack_module_taxonomy_menu_path() {
  drupal_set_message("rewriting the path");
	$output = array(
    'devtrack_module_path_custom_path' => t('Devtrac Path'),
  );

  return $output;
}

function devtrack_module_path_custom_path($vid, $tid) {
	return 'tripreports/map?placetype=' . $tid;
}

function devtrack_module_getcontext($nid) {
	$node = node_load($nid);
	return $node->field_ftritem_place[0]['nid'];
}


function _devtrack_module_isinternetexplorer() {
        // $version = 6
    if ((isset($_SERVER['HTTP_USER_AGENT']) && (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') > 0 ))) {
        return true;
    } else {
        return false;
    }
}

/*
function devtrack_module_popups () {
  return array(
    'fieldtrip_node_form' => array( // The field trip node edit form
      '#edit-delete' => array(
        'href' => 'node/'. arg(1) . '/delete',
      ),
    ),
    'ftritem_node_form' => array( // The report item node edit form
      '#edit-delete' => array(
        'href' => 'node/'. arg(1) . '/delete',
      ),
    ),
  );
}
*/